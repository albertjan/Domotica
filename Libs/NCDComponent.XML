<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCDComponent</name>
    </assembly>
    <members>
        <member name="T:NCD.HelpFunctions">
            <summary>
            Static class contains all help functions
            </summary>
        </member>
        <member name="M:NCD.HelpFunctions.GetBit(System.Byte,System.Byte)">
            <summary>
            Get specfic bit of byte
            </summary>
            <param name="v">value of the byte</param>
            <param name="pos">position of the bit</param>
            <returns>value of the bit, 0 or 1</returns>
        </member>
        <member name="M:NCD.HelpFunctions.SetBit(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set specific bit of the byte
            </summary>
            <param name="v">byte to be set</param>
            <param name="pos">bit position</param>
            <param name="bitValue">bit value, </param>
            <returns>byte processed</returns>
        </member>
        <member name="M:NCD.HelpFunctions.ConvertToBCD(System.Byte)">
            <summary>
            Convert a byte to binary code decimal
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.HelpFunctions.ConvertFromBCD(System.Byte)">
            <summary>
            Convert a binary from BCD
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:NCD.SerialDeviceInfo">
            <summary>
            structure for serial port device, include serial port and modem
            </summary>
        </member>
        <member name="M:NCD.ListPorts.GetAppExePath">
            <summary>
            Get the AppExe path
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCD.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NCD.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NCD.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:NCD.IPWM">
            <summary>
            IPWM Object Interface
            </summary>
        </member>
        <member name="M:NCD.IPWM.SetLevel(System.Byte,System.Byte)">
            <summary>
            Set PWM value on specific output channel.
            </summary>
            <param name="channel">Channel Number: 0-7 </param>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,Channel(0-7),PWM Value(0-255)</description>
            <description>Set Output Channel PWM Value</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IPWM.SetLevelOfAllChannels(System.Byte)">
            <summary>
            Set all output channels to the same PWM value.
            </summary>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,0,PWM Value(0-255)</description>
            <description>Set All Output Channels Same PWM Value</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IPWM.StoreStartupValues(System.Byte)">
            <summary>
            Store the currently selected PWM value for all 8 channels as the default power-up values.
            </summary>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,9,PWM Value(0-255)</description>
            <description>Store Startup PWM Values</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IPWM.SetStartupMode(System.Boolean)">
            <summary>
            Set startup mode.
            </summary>
            <param name="immediately">True or False <para>'True' for all 8 channels to begin cycling immediately.</para>
            <para>'False' for each channel rising slowly to its stored default Powerup PWM Value, beginning with output channel 1.</para></param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,10,1</description>
            <description>Set Startup Mode (cycling immedialtely)</description>
            </item>
            <item>
            <description>254,10,0</description>
            <description>Set Startup Mode (rising slowly)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.NCDBase.WriteBytes(System.Byte[])">
            <summary>
            write a byte array
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NCD.NCDBase.ReadByte2">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.NCDBase.GetTimeByte(System.Int64)">
            <summary>
            Calbute the time value from ms to NCD's time format
            Duration Interval : 0=(10 milliseconds * Duration) + 10
                                64=(5 seconds * Duration) + 5
            Duration: 0 to 63
            </summary>
            <param name="time">time: milliseconds</param>
            <returns>NCD time format Byte</returns>
        </member>
        <member name="M:NCD.NCDBase.Test2WayForIOADR8X16X">
            <summary>
            test2way function for IOADR8 or 16
            </summary>
            <returns>true for OK, false for Failed</returns>
        </member>
        <member name="M:NCD.NCDBase.SetDefaultForIOADR8X16X">
            <summary>
            
            </summary>
        </member>
        <member name="M:NCD.PWM.NCD#IPWM#SetLevel(System.Byte,System.Byte)">
            <summary>
            Set PWM value on specific output channel.
            </summary>
            <param name="channel">Channel Number: 0-7 </param>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.PWM.NCD#IPWM#SetLevelOfAllChannels(System.Byte)">
            <summary>
            Set all output channels to the same PWM value.
            </summary>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.PWM.NCD#IPWM#StoreStartupValues(System.Byte)">
            <summary>
            Store the currently selected PWM value for all 8 channels as the default power-up values.
            </summary>
            <param name="level">PWM Value: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NCD.PWM.NCD#IPWM#SetStartupMode(System.Boolean)" -->
        <member name="T:NCD.ProXR.IAdvanceConfiguration">
            <summary>
            Defines the interface of Advance Configuration.
            </summary>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.SetRepetitionsValue(System.Byte)">
            <summary>
            Sets the repetition value of sending command to the controller. 
            </summary>
            <param name="repsValue">Repetition value , 1 - 255.</param>
            <remarks>
            The repetition value controls how many times relay status data is sent to the Relay control chips.
            Normally, the value is 1. But if you experience relays that turn themselves off when activated, 
            try changing the Reps value to any number from 2 to 255 and see what happens. 
            It takes more than a second to process each relay control command when the value is set to 255.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.GetRepetitionsValue">
            <summary>
            Reads the repetition value of sending command to the controller. 
            </summary>
            <returns>-1: Failed,1 - 255: Repetition value.</returns>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.RecoverSafeParameter">
            <summary>
            Sets all key variables inside the controller to Safe Parameters. 
            </summary>
            <remarks>
            If for some reason, the controller does not seem be functioning properly, 
            or it appears you have lost communication, 
            try sending this command and see if it recovers.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.SetCharacterDelay(System.Byte)">
            <summary>
            Sets the character delay value. 
            </summary>
            <remarks>
            The Character Delay value determines the spacing between data bytes sent from 
            the controller back to your PC. By default, delayValue is set to 35, 
            which is known to be a conservatively safe value. 
            The minimum allows delayValue value is 3 (we have not seen a PC that can handle this setting). 
            If you want to boost performance, set the delayValue lower. 
            A value of 7-10 should provide greatly improved communication speed.
            </remarks>
            <param name="delayValue">Character delay value, 3 - 255.</param>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.ReadCharacterDelay">
            <summary>
            Reads the stored character delay value from the controller.
            </summary>
            <returns>-1: Failed,3 - 255: Character delay value.</returns>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.SetAttachedBanks(System.Byte)">
            <summary>
            Sets the attached banks value. 
            </summary>
            <param name="bankValue">Attached banks value£¬1-32.</param>
            <remarks>
            The ProXR series controllers are shipped as though the customer has 256 relays attached. 
            This allows the controller to be instantly compatible with several XR expansion boards, right out of the box. 
            However, you can gain a performance increase by setting the attached banks value to the actual 
            number of relays you are using.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.ReadAttachedBanks">
            <summary>
            Reads the attached banks value. 
            </summary>
            <returns>-1: Failed,1-32 : Attached banks value</returns>
            <remarks>
            This command reports back a value from 1 to 32, indicating how many relays are attached to the relayId controller.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.SetTestCycle(System.Byte)">
            <summary>
            Sets the test cycle bank value.
            </summary>
            <param name="bankValue">Number of banks to be tested, 0-32</param>
            <remarks>
            When the ProXR series controllers are powered up in Configuration mode (all dip switches in the off position), 
            the first instruction the controller processes is a function that tests all the on board relays. 
            By default, the ProXR controller will test 4 banks of relays, 
            which is the maximum number of relays that we currently product on a single circuit board. 
            If you have a controller with fewer relays, you can use this function to speed up the test cycle by 
            setting the controller to the actual number of relay banks on your ProXR controller.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.ReadTestCycle">
            <summary>
            Reads the test cycle bank value.
            </summary>
            <returns>-1: Failed,0 - 32: number of banks to be tested</returns>
            <remarks>
            This command reports back a value from 0 to 32, indicating how many relays are tested 
            when the controller is powered up in configuration mode (all dip switches in the off position).
            </remarks>
        </member>
        <member name="M:NCD.ProXR.IAdvanceConfiguration.RestoreFactorySettings">
            <summary>
            Restores internal parameters to the factory default settings.
            </summary>
            <remarks>
            This command operates in configuration mode only (all dip switches in the off position). 
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#SetRepetitionsValue(System.Byte)">
            <summary>
            Sets the repetition value of sending command to the controller. 
            </summary>
            <param name="repsValue">Repetition value , 1 - 255.</param>
            <remarks>
            The repetition value controls how many times relay status data is sent to the Relay control chips.
            Normally, the value is 1. But if you experience relays that turn themselves off when activated, 
            try changing the Reps value to any number from 2 to 255 and see what happens. 
            It takes more than a second to process each relay control command when the value is set to 255.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#GetRepetitionsValue">
            <summary>
            Reads the repetition value of sending command to the controller. 
            </summary>
            <returns>-1: Failed,1 - 255: Repetition value.</returns>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#RecoverSafeParameter">
            <summary>
            Sets all key variables inside the controller to Safe Parameters. 
            </summary>
            <remarks>
            If for some reason, the controller does not seem be functioning properly, 
            or it appears you have lost communication, 
            try sending this command and see if it recovers.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#SetCharacterDelay(System.Byte)">
            <summary>
            Sets the character delay value. 
            </summary>
            <remarks>
            The Character Delay value determines the spacing between data bytes sent from 
            the controller back to your PC. By default, delayValue is set to 35, 
            which is known to be a conservatively safe value. 
            The minimum allows delayValue value is 3 (we have not seen a PC that can handle this setting). 
            If you want to boost performance, set the delayValue lower. 
            A value of 7-10 should provide greatly improved communication speed.
            </remarks>
            <param name="delayValue">Character delay value, 3 - 255.</param>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#ReadCharacterDelay">
            <summary>
            Reads the stored character delay value from the controller.
            </summary>
            <returns>-1: Failed,3 - 255: Character delay value.</returns>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#SetAttachedBanks(System.Byte)">
            <summary>
            Sets the attached banks value. 
            </summary>
            <param name="bankValue">Attached banks value£¬1-32.</param>
            <remarks>
            The ProXR series controllers are shipped as though the customer has 256 relays attached. 
            This allows the controller to be instantly compatible with several XR expansion boards, right out of the box. 
            However, you can gain a performance increase by setting the attached banks value to the actual 
            number of relays you are using.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#ReadAttachedBanks">
            <summary>
            Reads the attached banks value. 
            </summary>
            <returns>-1: Failed,1-32 : Attached banks value</returns>
            <remarks>
            This command reports back a value from 1 to 32, indicating how many relays are attached to the relayId controller.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#SetTestCycle(System.Byte)">
            <summary>
            Sets the test cycle bank value.
            </summary>
            <param name="bankValue">Number of banks to be tested, 0-32</param>
            <remarks>
            When the ProXR series controllers are powered up in Configuration mode (all dip switches in the off position), 
            the first instruction the controller processes is a function that tests all the on board relays. 
            By default, the ProXR controller will test 4 banks of relays, 
            which is the maximum number of relays that we currently product on a single circuit board. 
            If you have a controller with fewer relays, you can use this function to speed up the test cycle by 
            setting the controller to the actual number of relay banks on your ProXR controller.
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#ReadTestCycle">
            <summary>
            Reads the test cycle bank value.
            </summary>
            <returns>-1: Failed,0 - 32: number of banks to be tested</returns>
            <remarks>
            This command reports back a value from 0 to 32, indicating how many relays are tested 
            when the controller is powered up in configuration mode (all dip switches in the off position).
            </remarks>
        </member>
        <member name="M:NCD.ProXR.CAdvanceConfiguration.NCD#ProXR#IAdvanceConfiguration#RestoreFactorySettings">
            <summary>
            Restores internal parameters to the factory default settings.
            </summary>
            <remarks>
            This command operates in configuration mode only (all dip switches in the off position). 
            </remarks>
        </member>
        <member name="T:NCD.IProXR">
            <summary>
            Represents the interface of ProXR.
            </summary>
        </member>
        <member name="M:NCD.IProXR.TurnOnReportMode">
            <summary>
            Turn on report mode.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,27</description>
            <description>Turn On Report Mode</description>
            </item>
            </list>
            <para>Reporting mode, by default, is ON, meaning every time a command is sent to the controller, 
            the controller will send an 85 back to the computer, indicating that the command has finished executing 
            your instructions.</para> 
            <para>We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. </para>
            <para>A delay between some commands may be required when using 1-Way communications. </para>
            <para>For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.</para>
            </remarks>
        </member>
        <member name="M:NCD.IProXR.TurnOffReportMode">
            <summary>
            Turn off report mode.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,28</description>
            <description>Turn Off Report Mode</description>
            </item>
            </list>
            <para>Reporting mode, by default, is ON, meaning every time a command is sent to the controller, 
            the controller will send an 85 back to the computer, indicating that the command has finished executing 
            your instructions.</para> 
            <para>We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. </para>
            <para>A delay between some commands may be required when using 1-Way communications. </para>
            <para>For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.</para>
            </remarks>
        </member>
        <member name="P:NCD.IProXR.AdvanceConfiguration">
            <summary>
            Represents Advance Configuration object.
            </summary>
        </member>
        <member name="P:NCD.IProXR.RelayBanks">
            <summary>
            Represents the relay banks.
            </summary>
        </member>
        <member name="P:NCD.IProXR.Timers">
            <summary>
            Represents Timer object.
            </summary>
        </member>
        <member name="P:NCD.IProXR.AD12">
            <summary>
            AD 12 object
            </summary>
        </member>
        <member name="P:NCD.IProXR.AD8">
            <summary>
            AD 8 object
            </summary>
        </member>
        <member name="P:NCD.IProXR.Pot">
            <summary>
            Potentiometer object
            </summary>
        </member>
        <member name="P:NCD.IProXR.Motion">
            <summary>
            Motion detection object
            </summary>
        </member>
        <member name="P:NCD.IProXR.Scan">
            <summary>
            IScan Object
            </summary>
        </member>
        <member name="P:NCD.IProXR.Keypad">
            <summary>
            Keypad object
            </summary>
        </member>
        <member name="M:NCD.CPROXR.NCD#IProXR#TurnOnReportMode">
            <summary>
            Turn on report mode.
            </summary>
        </member>
        <member name="M:NCD.CPROXR.NCD#IProXR#TurnOffReportMode">
            <summary>
            Turn off report mode.
            </summary>
        </member>
        <member name="F:NCD.PortSetting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCD.PortSetting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCD.PortSetting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NCD.PortSetting.UsingComPort">
            <summary>
            Using Com Port
            </summary>
        </member>
        <member name="T:NCD.IPotentiometer">
            <summary>
            Potentiometer Object Interface
            </summary>
        </member>
        <member name="M:NCD.IPotentiometer.SetPotValue(System.Byte,System.Byte)">
            <summary>
            Set wiper position of the selected potentiometer to a selected value.
            </summary>
            <param name="value">value of pot: 0-255</param>
            <param name="pot">id of pot: 0-255</param>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.IPotentiometer.SetAllPotsValue(System.Byte)">
            <summary>
            Set wiper position of all potentiometers to a selected value.
            </summary>
            <param name="value">0-255</param>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.IPotentiometer.SetStartupValue(System.Byte,System.Byte)">
            <summary>
            Store a powerup default wiper position for the selected potentiometer.
            </summary>
            <param name="value">value for start up: 0-255</param>
            <param name="pot">id of pot: 0-47</param>
            <returns>True for success</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.IPotentiometer.ReadStartupValue(System.Byte)">
            <summary>
            Read value indicating the default power up wiper position.
            </summary>
            <param name="pot">id of pot: 0-47</param>
            <returns>value of startup</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.Potentiometer.NCD#IPotentiometer#SetPotValue(System.Byte,System.Byte)">
            <summary>
            This methodes set the wiper position of the selected potentiometer to a selected value
            </summary>
            <param name="value">value of pot, 0 - 255</param>
            <param name="pot">id of pot, 0 - 255</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.Potentiometer.NCD#IPotentiometer#SetAllPotsValue(System.Byte)">
            <summary>
            Set All wiper position of all potentiometers to a selected value
            </summary>
            <param name="value">0 - 255</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.Potentiometer.NCD#IPotentiometer#SetStartupValue(System.Byte,System.Byte)">
            <summary>
            Stores a powerup default wiper position for the selected potentiometer
            </summary>
            <param name="value">value for start up 0 - 255</param>
            <param name="pot">id of pot, 0 - 47</param>
            <returns>true for success</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.Potentiometer.NCD#IPotentiometer#ReadStartupValue(System.Byte)">
            <summary>
            Read value indicating the default power up wiper position
            </summary>
            <param name="pot">id of pot, 0 - 47</param>
            <returns>value of startup</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="T:NCD.ChecksumException">
            <summary>
            Exception for Checksum Error
            </summary>
        </member>
        <member name="M:NCD.ChecksumException.#ctor">
            <summary>
            Construct
            </summary>
        </member>
        <member name="M:NCD.ChecksumException.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NCD.ChecksumException.#ctor(System.String,System.Exception)">
            <summary>
            Construct
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:NCD.IReactor">
            <summary>
            Interface for Reactor controller
            </summary>
        </member>
        <member name="M:NCD.IReactor.TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,0</description>
            <description>Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,1</description>
            <description>Turn Off Relay 2</description>
            </item> 
            <item>
            <description>254,2</description>
            <description>Turn Off Relay 3</description>
            </item>
            <item>
            <description>254,3</description>
            <description>Turn Off Relay 4</description>
            </item> 
            <item>
            <description>254,4</description>
            <description>Turn Off Relay 5</description>
            </item>
            <item>
            <description>254,5</description>
            <description>Turn Off Relay 6</description>
            </item> 
            <item>
            <description>254,6</description>
            <description>Turn Off Relay 7</description>
            </item>
            <item>
            <description>254,7</description>
            <description>Turn Off Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,8</description>
            <description>Turn On Relay 1</description>
            </item>
            <item>
            <description>254,9</description>
            <description>Turn On Relay 2</description>
            </item> 
            <item>
            <description>254,10</description>
            <description>Turn On Relay 3</description>
            </item>
            <item>
            <description>254,11</description>
            <description>Turn On Relay 4</description>
            </item> 
            <item>
            <description>254,12</description>
            <description>Turn On Relay 5</description>
            </item>
            <item>
            <description>254,13</description>
            <description>Turn On Relay 6</description>
            </item> 
            <item>
            <description>254,14</description>
            <description>Turn On Relay 7</description>
            </item>
            <item>
            <description>254,15</description>
            <description>Turn On Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.GetStatus(System.Byte)">
            <summary>
            Get status of individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,16</description>
            <description>Get status of Relay 1</description>
            </item>
            <item>
            <description>254,17</description>
            <description>Get status of Relay 2</description>
            </item> 
            <item>
            <description>254,18</description>
            <description>Get status of Relay 3</description>
            </item>
            <item>
            <description>254,19</description>
            <description>Get status of Relay 4</description>
            </item> 
            <item>
            <description>254,20</description>
            <description>Get status of Relay 5</description>
            </item>
            <item>
            <description>254,21</description>
            <description>Get status of Relay 6</description>
            </item> 
            <item>
            <description>254,22</description>
            <description>Get status of Relay 7</description>
            </item>
            <item>
            <description>254,23</description>
            <description>Get status of Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.GetStatusOfAllRelays">
            <summary>
            Get status of all relays at one time in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,24</description>
            <description>Get status of All Relays </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.ReadADValue(System.Byte)">
            <summary>
            Read 8 bits AD value of specific channel.
            </summary>
            <param name="channel">Channel Number: 0-7(0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.ReadPivotValue(System.Byte)">
            <summary>
            Read 8 bits Pivot value of specific channel.
            </summary>
            <param name="channel">Channel Number: 0-7(0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:NCD.IReactor.ReturnRelay(System.Byte)">
            <summary>
            Return control of relay to reactor board
            </summary>
            <param name="relayId">realy id, 0 - 7</param>
            <returns>true for success, false for failure</returns>
        </member>
        <member name="M:NCD.IReactor.ReturnAllRelays">
            <summary>
            Return control of all relays to reactor board
            </summary>
            <returns>true for success, false for failure</returns>
        </member>
        <member name="M:NCD.IReactor.SetAllRelaysStatus(System.Byte)">
            <summary>
            Set all relays status
            </summary>
            <param name="status">status of all 8 relays, each bit represent a relay, bit value 1 for on, bit value 0 for off</param>
            <returns></returns>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#GetStatus(System.Byte)">
            <summary>
            Get status of individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#GetStatusOfAllRelays">
            <summary>
            Get status of all relays at one time in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#ReadADValue(System.Byte)">
            <summary>
            Read 8 bits AD value of specific channel.
            </summary>
            <param name="channel">Channel Number: 0-7(0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#ReadPivotValue(System.Byte)">
            <summary>
            Read 8 bits Pivot value of specific channel.
            </summary>
            <param name="channel">Channel Number: 0-7(0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:NCD.Reactor._Read8BitsValue">
            <summary>
            Read 8 bit value.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.Reactor.NCD#IReactor#SetAllRelaysStatus(System.Byte)">
            <summary>
            Set all relays status
            </summary>
            <param name="status">status of all 8 relays, each bit represent a relay, bit value 1 for on, bit value 0 for off</param>
            <returns></returns>
        </member>
        <member name="T:NCD.E3CIdentification">
            <summary>
            Represents an identification of NCD board.
            </summary>
        </member>
        <member name="F:NCD.E3CIdentification.id1">
            <summary>
            Represents device Id number part 1.
            </summary>
        </member>
        <member name="F:NCD.E3CIdentification.id2">
            <summary>
            Represents device Id number part 2.
            </summary>
        </member>
        <member name="F:NCD.E3CIdentification.version">
            <summary>
            Represents device firmware version.
            </summary>
        </member>
        <member name="F:NCD.E3CIdentification.year">
            <summary>
            Represents year of device manufacture.
            </summary>
        </member>
        <member name="F:NCD.E3CIdentification.deviceNumber">
            <summary>
            Represents E3C device number.
            </summary>
        </member>
        <member name="T:NCD.IE3C">
            <summary>
            Interface of E3C command.
            </summary>
            <remarks>
            <para>The E3C commands allow you to control up to 256 NCD devices from a single serial port.</para>
            <para>It is OK to mix different types of devices, as long as the devices are E3C compliant.</para>
            </remarks>
        </member>
        <member name="M:NCD.IE3C.RecallDeviceIdentification">
            <summary>
            Reports back the IE3C device Number of the currently enabled device.
            </summary>
            <returns>E3C Identification of device</returns>
        </member>
        <member name="M:NCD.IE3C.RecallDeviceNumber">
            <summary>
            Reads the stored device number from the controller.
            </summary>  
            <returns>-1: Failed <para>0-255: Device Number</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,247</description>
            <description>Recall Device Number</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IE3C.EnableAllDevices">
            <summary>
            Tells all devices to respond to the commands.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,248</description>
            <description>Enable All devices</description>
            </item>
            </list>
            </remarks> 
        </member>
        <member name="M:NCD.IE3C.DisableAllDevices">
            <summary>
            Tells all devices to ignore the commands.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,249</description>
            <description>Disable All Devices</description>
            </item>
            </list>
            </remarks>          
        </member>
        <member name="M:NCD.IE3C.EnableSpecificDevice(System.Byte)">
            <summary>
            Tells a specific device to listen to the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,250</description>
            <description>Enable a Selected Device</description>
            </item>
            </list>
            </remarks>  
        </member>
        <member name="M:NCD.IE3C.DisableSpecificDevice(System.Byte)">
            <summary>
            Tells a specific device to ignore the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,251</description>
            <description>Disable a Selected Device</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IE3C.EnableAllDevicesExcept(System.Byte)">
            <summary>
            Tells a specific device to ignore the commands, all others will listen.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,252</description>
            <description>Enable a Selected Device Only</description>
            </item>
            </list>
            </remarks>        
        </member>
        <member name="M:NCD.IE3C.DisableAllDevicesExcept(System.Byte)">
            <summary>
            Tells a specific device to listen to the commands,
            all other devices will ignore the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,253</description>
            <description>Disable a Selected Device Only</description>
            </item>
            </list>
            </remarks>        
        </member>
        <member name="M:NCD.IE3C.ProgramDeviceNumber(System.Byte)">
            <summary>
            Programs the device number into the controller. 
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,255</description>
            <description>Program E3C Device Number</description>
            </item>
            </list>
            Only ONE controller should be attached to the computer at the time of programming. 
            Once programmed, use the IE3C commands to control which devices you are speaking to.
            </remarks>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#RecallDeviceIdentification">
            <summary>
            Reports back the IE3C device Number of the currently enabled device.
            </summary>
            <returns>E3C Identification of device</returns>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#RecallDeviceNumber">
            <summary>
            Reads the stored device number from the controller.
            </summary>  
            <returns>-1: Failed <para>0-255: Device Number</para></returns>        
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#EnableAllDevices">
            <summary>
            Tells all devices to respond to the commands.
            </summary>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#DisableAllDevices">
            <summary>
            Tells all devices to ignore the commands.
            </summary>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#EnableSpecificDevice(System.Byte)">
            <summary>
            Tells a specific device to listen to the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#DisableSpecificDevice(System.Byte)">
            <summary>
            Tells a specific device to ignore the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#EnableAllDevicesExcept(System.Byte)">
            <summary>
            Tells a specific device to ignore the commands, all others will listen.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#DisableAllDevicesExcept(System.Byte)">
            <summary>
            Tells a specific device to listen to the commands,
            all other devices will ignore the commands.
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
        </member>
        <member name="M:NCD.CE3C.NCD#IE3C#ProgramDeviceNumber(System.Byte)">
            <summary>
            Programs the device number into the controller. 
            </summary>
            <param name="deviceId">Device Number: 0-255</param>
            <remarks>
            Only ONE controller should be attached to the computer at the time of programming. 
            Once programmed, use the IE3C commands to control which devices you are speaking to.
            </remarks>
        </member>
        <member name="T:NCD.IScan">
            <summary>
            Scan Object Interface
            </summary>
        </member>
        <member name="M:NCD.IScan.ScanValue(System.Byte)">
            <summary>
            Scan the status of bank
            </summary>
            <param name="channel">Channel Number: 0-255</param>
            <returns>8 bits status, each bits represents a channel's status</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.Scan.NCD#IScan#ScanValue(System.Byte)">
            <summary>
            Scan the status of bank
            </summary>
            <param name="channel">bank ID, 0 - 255</param>
            <returns>8 bits status, each bits represents a channel's status</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="T:NCD.IR2X">
            <summary>
            R2x Object interface
            </summary>
        </member>
        <member name="M:NCD.IR2X.TurnOffRelay(System.Byte)">
            <summary>
            Turn off specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,0</description>
            <description>Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,2</description>
            <description>Turn Off Relay 2</description>
            </item> 
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.TurnOnRelay(System.Byte)">
            <summary>
            Turn on specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,1</description>
            <description>Turn On Relay 1</description>
            </item>
            <item>
            <description>254,3</description>
            <description>Turn On Relay 2</description>
            </item> 
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.GetStatus(System.Byte)">
            <summary>
            Get status of specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,4</description>
            <description>Get Relay 1 Status</description>
            </item>
            <item>
            <description>254,5</description>
            <description>Get Relay 2 Status</description>
            </item> 
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.GetStatusOfBothRelays">
             <summary>
             Get status of both relays in current selected bank.
             </summary>
             <exception cref="T:System.TimeoutException">Read Timeout</exception>
             <returns><para>Return Byte 0: Both Relays are Off</para>
             <para>Return Byte 1: Relay 1 is On, Relay 2 is Off</para>
             <para>Return Byte 2: Relay 2 is On, Relay 1 is Off</para>
             <para>Return Byte 3: Both Relays are On</para>
            </returns>
            <remarks>
             <list type="table">
             <listheader>
             <term>Command</term>
             <term>Function</term>
             </listheader>
             <item>
             <description>254,7</description>
             <description>Get Status of Both Relays</description>
             </item>
             </list>        
            </remarks>
        </member>
        <member name="M:NCD.IR2X.SetStatusOfBothRelays(NCD.RelayStatus,NCD.RelayStatus)">
            <summary>
            Set status of both relays at one time.
            </summary>
            <param name="r1">Status of Relay 1: ON or OFF</param>
            <param name="r2">Status of Relay 2: ON or OFF</param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,6,0</description>
            <description>Turn Off Both Relays</description>
            </item>
            <item>
            <description>254,6,1</description>
            <description>Turn On Relay 1, Turn Off Relay 2</description>
            </item>
            <item>
            <description>254,6,2</description>
            <description>Turn On Relay 2, Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,6,3</description>
            <description>Turn On Both Relays</description>
            </item>    
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.SetStatusOfBothRelays(System.Byte)">
            <summary>
            Set status of both relays at one time.
            </summary>
            <param name="status">Status of two relays: 0-3</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,6,0</description>
            <description>Turn Off Both Relays</description>
            </item>
            <item>
            <description>254,6,1</description>
            <description>Turn On Relay 1, Turn Off Relay 2</description>
            </item>
            <item>
            <description>254,6,2</description>
            <description>Turn On Relay 2, Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,6,3</description>
            <description>Turn On Both Relays</description>
            </item>    
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.StorePowerUpSatus">
            <summary>
            Store current status of relays into memory. 
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,8</description>
            <description>Store Relay Status as Power-Up Default</description>
            </item>
            </list>
            <para>This command will store the current on/off state of the relays in non-volatile EEPROM. 
            The next time power is applied, the relays will automatically return to the store on/off state.</para>
            </remarks>
        </member>
        <member name="M:NCD.IR2X.ReadPowerUpDefaultStatus">
            <summary>
            Read the stored power-up default status of relays in current selected bank.
            </summary>
            <returns><para>0-3</para>
            <para>Return Byte 0: Both Relays are Off on Power-Up</para>
            <para>Return Byte 1: Relay 1 is On, Relay 2 is Off on Power-Up</para>
            <para>Return Byte 2: Relay 2 is On, Relay 1 is Off on Power-Up</para>
            <para>Return Byte 3: Both Relays are On when Powered-Up</para></returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,9</description>
            <description>Retrieve Startup Default State of the Relays</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.R2X.NCD#IR2X#TurnOffRelay(System.Byte)">
            <summary>
            Turn off specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,0</description>
            <description>Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,2</description>
            <description>Turn Off Relay 2</description>
            </item> 
            </list>
            </remarks>
        </member>
        <member name="M:NCD.R2X.NCD#IR2X#TurnOnRelay(System.Byte)">
            <summary>
            Turn on specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,1</description>
            <description>Turn On Relay 1</description>
            </item>
            <item>
            <description>254,3</description>
            <description>Turn On Relay 2</description>
            </item> 
            </list>
            </remarks>         
        </member>
        <member name="M:NCD.R2X.NCD#IR2X#GetStatus(System.Byte)">
            <summary>
            Get status of specific relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,4</description>
            <description>Get Relay 1 Status</description>
            </item>
            <item>
            <description>254,5</description>
            <description>Get Relay 2 Status</description>
            </item> 
            </list>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NCD.R2X.NCD#IR2X#GetStatusOfBothRelays" -->
        <member name="M:NCD.R2X.NCD#IR2X#SetStatusOfBothRelays(NCD.RelayStatus,NCD.RelayStatus)">
            <summary>
            Set status of both relays at one time
            </summary>
            <param name="r1">Status of Relay 1: ON or OFF</param>
            <param name="r2">Status of Relay 2: ON or OFF</param>
            <returns><para>True for success</para></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NCD.R2X.NCD#IR2X#SetStatusOfBothRelays(System.Byte)" -->
        <member name="M:NCD.R2X.NCD#IR2X#StorePowerUpSatus">
            <summary>
            Store current status of relays into memory. 
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,8</description>
            <description>Store Relay Status as Power-Up Default</description>
            </item>
            </list>
            <para>This command will store the current on/off state of the relays in non-volatile EEPROM. 
            The next time power is applied, the relays will automatically return to the store on/off state.</para>
            </remarks>
        </member>
        <member name="M:NCD.R2X.NCD#IR2X#ReadPowerUpDefaultStatus">
             <summary>
             Read the stored power-up default status of relays in current selected bank.
             </summary>
             <returns><para>0-3</para>
             <para>Return Byte 0: Both Relays are Off on Power-Up</para>
             <para>Return Byte 1: Relay 1 is On, Relay 2 is Off on Power-Up</para>
             <para>Return Byte 2: Relay 2 is On, Relay 1 is Off on Power-Up</para>
             <para>Return Byte 3: Both Relays are On when Powered-Up</para></returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
             <list type="table">
             <listheader>
             <term>Command</term>
             <term>Function</term>
             </listheader>
             <item>
             <description>254,9</description>
             <description>Retrieve Startup Default State of the Relays</description>
             </item>
             </list>
            </remarks>
        </member>
        <member name="T:NCD.IMotionDetection">
            <summary>
            Interface for motion detection
            </summary>
        </member>
        <member name="M:NCD.IMotionDetection.DetectAnyMotion">
            <summary>
            Report if there is any motions detected.
            </summary>
            <returns>0-15 <para>The first four bits represent which quadrature has motion.</para> </returns>
            <exception cref="T:System.TimeoutException">Read Timeout </exception>
        </member>
        <member name="M:NCD.IMotionDetection.DetectMotionOfQuadrature(System.Byte)">
            <summary>
            Report if there is any motions in specified quadrature.
            </summary>
            <param name="quad">quadrature queried. 
            0 for bank 0 - 7
            1 for bank 8 - 15
            2 for bank 16 - 23
            3 for bank 24 - 32
            </param>
            <returns>A byte ranged from 0 to 255, each bits represent a bank. 1 for motion detected</returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IMotionDetection.SetScanDepth(System.Byte)">
            <summary>
            Set the scan depth.
            </summary>
            <param name="depth">depth for scan: 1-32</param>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.IMotionDetection.GetScanDepth">
            <summary>
            Get the depth of scan.
            </summary>
            <returns>Depth of scan</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IMotionDetection.GetMotionInBank(System.Byte)">
            <summary>
            Get motion status of bank.
            </summary>
            <param name="bank">id of the bank: 0-31</param>
            <returns>0-255, each bit represent a channel in bank, 1 for motion detected</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IMotionDetection.SetAutoclearMode(System.Boolean)">
            <summary>
            Set the autoclear mode.
            </summary>
            <param name="autoclear">true for autoclear</param>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.IMotionDetection.GetAutoclearMode">
            <summary>
            Get the autoclear mode.
            </summary>
            <returns>Status of autoclear mode</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IMotionDetection.GetPowerupDefaultAutoclearMode">
            <summary>
            Get value of powerup default autoclear mode.
            </summary>
            <returns>Value of autoclear</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IMotionDetection.ClearMotionDataInBank(System.Byte)">
            <summary>
            Clear motion data in specified bank.
            </summary>
            <param name="bankId">id of the bank: 0-31. 0 for first bank</param>
            <returns>True for success</returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.IMotionDetection.ClearMotionInAllBanks">
            <summary>
            Clear motion in All banks.
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#DetectAnyMotion">
            <summary>
            report if there is any motions detected
            </summary>
            <returns>0 - 15, the first four bits represent which quadrature has motion </returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#DetectMotionOfQuadrature(System.Byte)">
            <summary>
            report if there is any motions in specified quadrature
            
            </summary>
            <param name="quad">quadrature queried. 
            0 for bank 0 - 7
            1 for bank 8 - 15
            2 for bank 16 - 23
            3 for bank 24 - 32
            </param>
            <returns>a byte ranged from 0 to 255, each bits represent a bank. 1 for motion detected</returns>
            <exception cref="T:System.ArgumentException">Wrong arguement</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#GetScanDepth">
            <summary>
            Get the depth of scan
            </summary>
            <returns>depth of scan</returns>
            <exception cref="T:System.TimeoutException">Read timeout</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#SetScanDepth(System.Byte)">
            <summary>
            Set the scan depth
            
            </summary>
            <param name="depth">depth for scan. from 1 to 32</param>
            <returns></returns>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#GetMotionInBank(System.Byte)">
            <summary>
            Get motion status of bank
            </summary>
            <param name="bank">id of the bank, ranges from 0 to 31</param>
            <returns>byte ranged from 0 to 255, each bit represent a a channel in bank, 1 for motion detected</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#SetAutoclearMode(System.Boolean)">
            <summary>
            Set the autoclear mode
            </summary>
            <param name="autoclear">true for autoclear</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#GetAutoclearMode">
            <summary>
            Get the autoclear mode
            </summary>
            <returns>status of autoclear mode</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#GetPowerupDefaultAutoclearMode">
            <summary>
            Get value of powerup default autoclear mode 
            </summary>
            <returns>value of autoclear</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#ClearMotionDataInBank(System.Byte)">
            <summary>
            Clear motion data in specified bank
            </summary>
            <param name="bankId">id of the bank, from 0 to 31. 0 for first bank</param>
            <returns>true for success</returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.MotionDetection.NCD#IMotionDetection#ClearMotionInAllBanks">
            <summary>
            Clear motion in All banks
            </summary>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#TurnOnRelay(System.Byte)">
            <summary>
            Turns on individual relay in the current selected bank.
            </summary>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <param name="relayId">Relay number, 0 - 1</param>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#GetStatus(System.Byte)">
            <summary>
            Gets the status of an individual relay in the current selected bank.
            </summary>
            <param name="relayId">Relay number, 0 - 1</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns>ON or OFF</returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#GetStatusOfBothRelays">
            <summary>
            Gets the status of an individual relay in the given bank.
            </summary>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns> a byte from 0-3 indicating the on/off state of the relays when power is first applied to the board. 
            </returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#StorePowerUpSatus">
            <summary>
            Stores the current status of the relays in a given bank into memory. 
            </summary>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#ReadPowerUpDefaultStatus">
            <summary>
            Reads the stored power-up default status of the relays in current selected bank.
            </summary>
            <returns> a byte from 0-3 indicating the on/off state of the relays when power is first applied to the board. 
            </returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#SetStatusOfBothRelays(NCD.RelayStatus,NCD.RelayStatus)">
            <summary>
            Set the status of both relays at one time
            </summary>
            <param name="r1">status of relay 1</param>
            <param name="r2">status of relay 2</param>
            <returns></returns>
        </member>
        <member name="M:NCD.ZR2X.NCD#IR2X#SetStatusOfBothRelays(System.Byte)">
            <summary>
            Set the status of both relays at one time
            </summary>
            <param name="status">status of two relays</param>
            <returns>true for success</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="T:NCD.ZigBeeInfo">
            <summary>
            ZigBee Info struct
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.MY">
            <summary>
            MY
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.SH">
            <summary>
            SH
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.SL">
            <summary>
            SL
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.NI">
            <summary>
            NI
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.ParentNetworkAddress">
            <summary>
            Parent Network Address
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.DeviceType">
            <summary>
            Device Type
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.ProfileID">
            <summary>
            Profile ID
            </summary>
        </member>
        <member name="F:NCD.ZigBeeInfo.ManufacturerID">
            <summary>
            Manufacturer ID
            </summary>
        </member>
        <member name="T:NCD.IMesh">
            <summary>
            ZigBee Mesh Object interface
            </summary>
        </member>
        <member name="M:NCD.IMesh.GetDeviceList">
            <summary>
            Return array of zigbeeinfo.
            </summary>
            <returns><para>Array of ZigBeeInfo</para></returns>
        </member>
        <member name="M:NCD.IMesh.TalkToDevice(System.String,System.String)">
            <summary>
            Talk to specific address.
            </summary>
            <param name="dh"></param>
            <param name="dl"></param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.BroadcasatToAllDevices">
            <summary>
            Talk to all devices.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.GetDestinationHigh">
            <summary>
            Return high address of destination in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.GetDestinationLow">
            <summary>
            Get low address of destinatin in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.GetSourceHigh">
            <summary>
            Get high address of source in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.GetSourceLow">
            <summary>
            get low address of source in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.GetPanID">
            <summary>
            Get Pan id of in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.IMesh.SetPanID(System.String)">
            <summary>
            Set Pan ID.
            </summary>
            <param name="id">ID of the Pan, in string format</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CMesh.NCD#IMesh#GetPanID">
            <summary>
            Get Pan id of in string
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CMesh.NCD#IMesh#SetPanID(System.String)">
            <summary>
            set pan id
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCD.ITaraList">
            <summary>
            Interface for TaraList controller
            </summary>
        </member>
        <member name="M:NCD.ITaraList.SyncTimeWithPcTime">
            <summary>
            Synchoronize the time with PC's time
            </summary>
            <returns>true for success, false for failure, the function will fail in "run" mode</returns>
        </member>
        <member name="M:NCD.ITaraList.SetTimeManually(System.DateTime)">
            <summary>
            Set the time manually
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.ITaraList.GetTime">
            <summary>
            Get current time from the device
            </summary>
            <returns>Time of the device, return DateTime.MinValue if failed</returns>
        </member>
        <member name="M:NCD.ITaraList.Reboot">
            <summary>
            reboot the device
            </summary>
        </member>
        <member name="M:NCD.ITaraList.TurnOnRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turn on individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,108+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Turn On Individual Relay in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn on the selected relay in all banks.
            </remarks>
        </member>
        <member name="M:NCD.ITaraList.TurnOffRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turn off individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,100+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Turn Off Individual Relay in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn off the selected relay in all banks.
            </remarks>
        </member>
        <member name="M:NCD.ITaraList.TurnOnAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays on in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,130,Bank(0-32)</description>
            <description>Turn On All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn on all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.ITaraList.TurnOffAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays off in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,129,Bank(0-32)</description>
            <description>Turn Off All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn off all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.ITaraList.GetRelayStatusInBank(System.Byte,System.Byte)">
            <summary>
            Get status of an individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns>ON or OFF</returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,116+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Get Status of an Individual Relay in Bank</description>
            </item>
            </list>
            A BANK NUMBER OF 0 IS INVALID FOR THIS COMMAND. RETURNED RESULTS MAY BE UNPREDICTABLE.
            </remarks>
        </member>
        <member name="M:NCD.ITaraList.GetAllRelaysStatusInBank(System.Byte)">
            <summary>
            Get status of all relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 1-32</param>
            <returns><para>0-255</para>The value indicats the status of all 8 relays.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,124,Bank(1-32)</description>
            <description>Get Status of All Relays in Bank</description>
            </item>
            </list>        
            </remarks>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.ITaraList.SwitchToComputerControl(System.Byte,System.Byte)">
            <summary>
            Switch to computer control
            </summary>
            <param name="relayId">Relay ID, 0 - 7</param>
            <param name="bankId">Bank Number: 0 - 32</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.ITaraList.SwitchToDeviceControl(System.Byte,System.Byte)">
            <summary>
            Switch to device control
            </summary>
            <param name="relayId">Relay ID, 0 - 7</param>
            <param name="bankId">Bank Number: 0 - 32</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.ITaraList.SwitchAllRelaysToComputerControl(System.Byte)">
            <summary>
            Switch all relays in specific bank to computer control
            </summary>
            <param name="bankId">bank id, 0 - 32, 0 for all banks</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.ITaraList.SwitchAllRelaysToDeviceControl(System.Byte)">
            <summary>
            Switch all Relays to Device Control
            </summary>
            <param name="bankId">bank id, 0 -32, 0 for all banks,</param>
            <returns>true for success, </returns>
        </member>
        <member name="M:NCD.ITaraList.IsComputerControls(System.Byte,System.Byte)">
            <summary>
            Query if the computer controls
            </summary>
            <param name="relayId">relay id, 0 - 7</param>
            <param name="bankId">Bank Number: 1 - 32</param>
            <returns>true for computer controls</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.ITaraList.IsDeviceControls(System.Byte,System.Byte)">
            <summary>
            Query if the device controls
            </summary>
            <param name="relayId">relay id, 0 - 7</param>
            <param name="bankId">Bank Number: 1 - 32</param>
            <returns>true for devcie controls</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.ITaraList.GetAllRelaysControlsStatusInBank(System.Byte)">
            <summary>
            Query who has the controls for each relays in specific bank
            </summary>
            <param name="bankId">Bank Number: 1 - 32</param>
            <returns>byte for 8 relays' status, each bit represents a relay, bit0 for first relay, bit value of 1 means control by computer, 0 for computer</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.TaraList.NCD#ITaraList#SyncTimeWithPcTime">
            <summary>
            sync the time of the chip with the time of the pc
            </summary>
            <returns>true for success, the function will failure if it is in run mode</returns>
        </member>
        <member name="T:NCD.IRelayBanks">
            <summary>
            Represents the interface of Relay Banks.
            </summary>
        </member>
        <member name="M:NCD.IRelayBanks.SelectBank(System.Byte)">
            <summary>
            Direct commands to a selected relay bank.  
            All subsequent commands will be sent to the selected relay bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,49,BankNumber(0-32)</description>
            <description>Direct Commands to Selected Relay Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to select all relay banks.
            </remarks>        
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,RelayNumber(0-7)</description>
            <description>Turn Off Individual Relay</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,8+RelayNumber(0-7)</description>
            <description>Turn On Individual Relay</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turn off individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,100+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Turn Off Individual Relay in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn off the selected relay in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turn on individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,108+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Turn On Individual Relay in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn on the selected relay in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetStatus(System.Byte)">
             <summary>
             Get status of an individual relay in current selected bank.
             </summary>
             <param name="relayId">Relay Number: 0-7</param>
             <returns>ON or OFF</returns>        
             <exception cref="T:System.ArgumentException">Wrong Argument</exception>
             <exception cref="T:System.TimeoutException">Read Timeout</exception>
             <remarks>
             <list type="table">
             <listheader>
             <term>Command</term>
             <term>Function</term>
             </listheader>
             <item>
             <description>254,16+RelayNumber(0-7)</description>
             <description>Get Status of an Individual Relay</description>
             </item>
             </list> 
            A BANK NUMBER OF 0 IS INVALID FOR THIS COMMAND. RETURNED RESULTS MAY BE UNPREDICTABLE.</remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetStatusInBank(System.Byte,System.Byte)">
            <summary>
            Get status of an individual relay in a given bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns>ON or OFF</returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,116+RelayNumber(0-7), BankNumber(0-32)</description>
            <description>Get Status of an Individual Relay in Bank</description>
            </item>
            </list>
            A BANK NUMBER OF 0 IS INVALID FOR THIS COMMAND. RETURNED RESULTS MAY BE UNPREDICTABLE.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnAutoRelayRefresh">
            <summary>
            Turn on automatic relay refreshing.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,25</description>
            <description>Turn On Automatic Relay Refreshing</description>
            </item>
            </list>
            <para>Setting Automatically Stored when in Configuration Mode.</para>
            Default relay refreshing is turned on. Meaning every time you send a relay control command, the relays will respond to your commands.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffAutoRelayRefresh">
            <summary>
            Turn off automatic relay refreshing. 
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,26</description>
            <description>Turn Off Automatic Relay Refreshing</description>
            </item>
            </list>
            <para>Setting Automatically Stored when in Configuration Mode.</para> 
            Turning off relay refreshing allows you to control when the relays actually switch. 
            When refreshing is turned off, you can send relay control commands to the ProXR controller,
            and the controller will work just like normal, but the relays will never change state.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.StoreRefreshSettings">
            <summary>
            Store relay refreshing mode
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,35</description>
            <description>Store Relay Refreshing Mode</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.ReportStoredRefreshSettings">
            <summary>
            Read default powerup refreshing Status.
            </summary>
            <returns>ON or OFF</returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,36</description>
            <description>Report Back Stored Refresh Settings</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.ManuallyRefresh">
            <summary>
            Manually refresh relay bank. Set status of all relays at one time.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,37</description>
            <description>Manually Refresh Relay Bank</description>
            </item>
            </list>
            <para>This command stores the current status of relay refreshing in non-volatile memory.
             The next time the relay controller is powered up, refreshing will be set to the stored status.</para>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnAllRelays">
            <summary>
            Turn all relays on.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,30</description>
            <description>Turn On All Relays</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays on in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,130,Bank(0-32)</description>
            <description>Turn On All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn on all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffAllRelays">
            <summary>
            Turn off all relays in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,29</description>
            <description>Turn Off All Relays</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays off in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,129,Bank(0-32)</description>
            <description>Turn Off All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to turn off all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.InvertAllRelays">
            <summary>
            Invert status of all relays.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,31</description>
            <description>Invert All Relays</description>
            </item>
            </list>
            Relays that were on turn off, relays that were off turn on.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.InvertAllRelaysInBank(System.Byte)">
            <summary>
            Invert status of all relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,131,Bank(0-32)</description>
            <description>Invert All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to invert all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.ReverseAllRelays">
            <summary>
            Reverse pattern of relays in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,32</description>
            <description>Reverse All Relays</description>
            </item>
            </list>       
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.ReverseAllRelaysInBank(System.Byte)">
            <summary>
            Reverse pattern of relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,132,Bank(0-32)</description>
            <description>Reverse All Relays in Bank</description>
            </item>
            </list>
            A Bank Number of 0 indicates to reverse all relays in all banks.
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.Test2Ways">
            <summary>
            Tests 2-Way communications between PC and the relay controller.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,33</description>
            <description>Test 2-Way Communications with Controller</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetSelectedBank">
            <summary>
            Report back the selected relay bank number.
            </summary>
            <returns>0-32<para>0 indicates all banks.</para></returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,34</description>
            <description>Report the Selected Relay Bank</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.SetRelayStatus(System.Byte)">
            <summary>
            Set status of all relays directly in current selected bank. 
            </summary>
            <param name="status">8-bit status of relays: 0-255
            <para>A value of 0 turns off all the relays. A value of 255 turns on all the relays. 
            Other values set the status of the relays in the equivalent binary pattern of the RelayData parameter value.</para></param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,40,Status(0-255)</description>
            <description>Set Statues of Relays</description>
            </item>
            </list> 
            This allows you to easily set the status of 8 relays at one time. 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.SetRelayStatusInBank(System.Byte,System.Byte)">
            <summary>
            Set status of all relays at one time in a given bank.
            </summary>
            <param name="status">8-bit status of relays: 0-255
            <para>A value of 0 turns off all the relays. A value of 255 turns on all the relays. 
            Other values set the status of the relays in the equivalent binary pattern of the RelayData parameter value.</para></param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,140,Status(0-255),Bank(0-32)</description>
            <description>Set Statues of Relays in Bank</description>
            </item>
            </list>
            This allows you to easily set the status of 8 relays at one time.
            <para>A Bank Number of 0 applies this command to all relay banks.</para>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.StorePowerUpSatus">
            <summary>
            Store status of relays in current selected bank into memory. 
            </summary>
            <returns><para>True for success</para></returns>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,42</description>
            <description>Store Power Up Default Status</description>
            </item>
            </list>        
            The next time power is applied to the controller, relays will return to the stored on/off status. 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.StorePowerUpSatusInBank(System.Byte)">
            <summary>
            Store status of relays in a given bank into memory. 
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,142,Bank(0-32)</description>
            <description>Store Power Up Default Status in Bank</description>
            </item>
            </list> 
            The next time power is applied to the controller, relays will return to the stored on/off state.
            <para>A Bank Number of 0 stores pattern of all relays in all banks.</para>
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.ReadPowerUpDefaultStatus">
            <summary>
            Read the stored power-up default status of relays in current selected bank.
            </summary>
            <returns>Array that holds the status of current selected bank</returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,43</description>
            <description>Read Power Up Default Status</description>
            </item>
            </list> 
            Returns null if fail to read from COM port. The array contains one item if not all banks are selected.
            </remarks>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IRelayBanks.ReadPowerUpDefaultStatusInBank(System.Byte)">
            <summary>
            Read stored power-up default status of relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns>Array that holds the status of current given bank.</returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,143,Bank(0-32)</description>
            <description>Read Power Up Default Status in Bank</description>
            </item>
            </list> 
            Returns null if fail to read from COM port. The array contains one item if not all banks are selected.
            A Bank Number of 0 reports back 26 bytes of data, indicating the stored pattern of all 26 banks.
            </remarks>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnOneRelayOnly(System.Byte)">
            <summary>
            Turn on one relay only, safe break before make.
            </summary>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,46,Relay(0-255)</description>
            <description>Turn On One Relay ONLY</description>
            </item>
            </list> 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOffRelayAdvanced(System.Byte)">
            <summary>
            Turn off a relay specified by its relay number.
            </summary>
            <param name="relayId">Relay Number: 0-255 </param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,47,Relay(0-255)</description>
            <description>Turn Off One Relay Specified by Relay Number</description>
            </item>
            </list> 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.TurnOnRelayAdvanced(System.Byte)">
            <summary>
            Turn on a relay specified by its relay number.
            </summary>
            <param name="relayId">Relay Number: 0-255 </param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,48,Relay(0-255)</description>
            <description>Turn On One Relay Specified by Relay Number</description>
            </item>
            </list> 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetAllStatus">
            <summary>
            Get status of all relays in current selected bank.
            </summary>
            <returns>Array of byte type.
            <para>The array contains one item(0-255) if not all banks are selected.</para>
            <para>If the currently selected relay bank is 0, the array will contains 32 bytes indicating the status of all 32 relay banks.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,24</description>
            <description>Get Status of All Relays</description>
            </item>
            </list> 
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetRelaysStatusInAllBanks">
            <summary>
            Get status of all relays in all banks.
            </summary>
            <returns>Array of byte type.
            <para>The array will contains 32 bytes indicating the status of all 32 relay banks.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,124,0</description>
            <description>Get Status of All Relays in All Banks</description>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="M:NCD.IRelayBanks.GetAllRelaysStatusInBank(System.Byte)">
            <summary>
            Get status of all relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 1-32</param>
            <returns><para>0-255</para>The value indicats the status of all 8 relays.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,124,Bank(1-32)</description>
            <description>Get Status of All Relays in Bank</description>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#SelectBank(System.Byte)">
            <summary>
            Directs commands to a selected relay bank.  
            All subsequent commands will be sent to the selected relay bank.
            </summary>
            <param name="bankId">Bank number, 0 - 32</param>
            <remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong arguments</exception>
            <returns> true for success</returns>
            A Bank Value of 0 applies this command to all relay banks.
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffRelay(System.Byte)">
            <summary>
            Turns off individual relays in the current selected bank.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong arguments</exception>
            <returns> true for success</returns>
            <param name="relayId">Relay number, 0 - 7</param>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turns off individual relays in the given bank.
            </summary>
            <param name="relayId">Relay number, 0 - 7</param>
            <param name="bankId">Bank number, 0 - 32</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong arguments</exception>
            <returns> true for success</returns>
            <remarks>
            A Bank Value of 0 applies this command to all relay banks.
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnRelayInBank(System.Byte,System.Byte)">
            <summary>
            Turns on individual relays in the given bank.
            </summary>
            <param name="relayId">Relay number, 0 - 7</param>
            <param name="bankId">Bank number, 0 - 32</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Wrong arguments</exception>
            <remarks>
            A Bank Value of 0 applies this command to all relay banks.
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetStatus(System.Byte)">
            <summary>
            Get status of an individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <returns>ON or OFF</returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>CURRENT SELECTED Bank Number OF 0 IS INVALID FOR THIS COMMAND.RETURNED RESULTS MAY BE UNPREDICTABLE.</remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetStatusInBank(System.Byte,System.Byte)">
            <summary>
            Gets the status of an individual relay in the given bank.
            </summary>
            <param name="relayId">Relay number, 0 - 7</param>
            <param name="bankId">Bank number, 0 - 32</param>
            <exception cref="T:System.ArgumentException">Wrong arguments</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns>ON or OFF</returns>
            <remarks>
            A BANK VALUE OF 0 IS INVALID FOR THIS COMMAND.RETURNED RESULTS MAY BE UNPREDICTABLE.
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnAutoRelayRefresh">
            <summary>
            Turns on auto relayId refresh .
            </summary>
            <remarks>
            Meaning every time you send a relay control command, the relays will respond to your commands.
            </remarks>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffAutoRelayRefresh">
            <summary>
            Turns off auto relay refresh. 
            </summary>
            <remarks>
            Turning off relay refreshing allows you to control when the relays actually switch. 
            When refreshing is turned off, you can send relay control commands to the ProXR controller,
            and the controller will work just like normal, but the relays will never change state.
            </remarks>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#StoreRefreshSettings">
            <summary>
            Stores relay refreshing mode
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ReportStoredRefreshSettings">
            <summary>
            Reads the stored refresh settings.
            </summary>
            <returns>ON or OFF</returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ManuallyRefresh">
            <summary>
            Manually refresh relay bank.
            <para>Set status of all relays at one time.</para>
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnAllRelays">
            <summary>
            Turn all relays on.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays on in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>  
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffAllRelays">
            <summary>
            Turn off all relays in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffAllRelaysInBank(System.Byte)">
            <summary>
            Turn all relays off in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns> 
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#InvertAllRelays">
            <summary>
            Invert status of all relays.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#InvertAllRelaysInBank(System.Byte)">
            <summary>
            Invert status of all relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ReverseAllRelays">
            <summary>
            Reverse pattern of relays in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ReverseAllRelaysInBank(System.Byte)">
            <summary>
            Reverse pattern of relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#Test2Ways">
            <summary>
            Tests 2-Way communications between PC and the relay controller.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetSelectedBank">
            <summary>
            Report back the selected relay bank number.
            </summary>
            <returns>0-32<para>0 indicates all banks.</para></returns> 
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#SetRelayStatus(System.Byte)">
            <summary>
            Set status of all relays directly in current selected bank. 
            </summary>
            <param name="status">8-bit status of relays: 0-255
            <para>A value of 0 turns off all the relays. A value of 255 turns on all the relays. 
            Other values set the status of the relays in the equivalent binary pattern of the RelayData parameter value.</para></param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#SetRelayStatusInBank(System.Byte,System.Byte)">
            <summary>
            Set status of all relays at one time in a given bank.
            </summary>
            <param name="status">8-bit status of relays: 0-255</param>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#StorePowerUpSatus">
            <summary>
            Store status of relays in current selected bank into memory. 
            </summary>
            <returns><para>True for success</para></returns>   
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#StorePowerUpSatusInBank(System.Byte)">
            <summary>
            Store status of relays in a given bank into memory. 
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ReadPowerUpDefaultStatus">
            <summary>
            Read the stored power-up default status of relays in current selected bank.
            </summary>
            <returns>Array that holds the status of current selected bank.</returns>
            <remarks>
            Returns null if fail to read from COM port. The array contains one item if not all banks are selected.
            </remarks>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#ReadPowerUpDefaultStatusInBank(System.Byte)">
            <summary>
            Read stored power-up default status of relays in a given bank.
            </summary>
            <param name="bankId">Bank Number: 0-32</param>
            <returns>Array that holds the status of current given bank.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnOneRelayOnly(System.Byte)" -->
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOffRelayAdvanced(System.Byte)">
            <summary>
            Turn off a relay specified by its relay number.
            </summary>
            <param name="relayId">Relay Number: 0 - 255 </param>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#TurnOnRelayAdvanced(System.Byte)">
            <summary>
            Turn on a relay specified by its relay number.
            </summary>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetAllStatus">
            <summary>
            Get status of all relays in current selected bank.
            </summary>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetAllRelaysStatusInBank(System.Byte)">
            <summary>
            Gets the status of all relays in the given bank.
            </summary>
            <param name="bankId">Bank number, 1 - 32</param>
            <returns>byte that holds the status of current selected bank</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.CRelayBanks.NCD#IRelayBanks#GetRelaysStatusInAllBanks">
            <summary>
            Gets the status of all relays in the given bank.
            </summary>
            <returns>Array that holds the status of current selected bank</returns>
            <remarks>
            The array contains one item if not all banks are selected.
            A Bank Number of 0 gets the status of all relays in all 32 banks.
            </remarks>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.CRelayBanks._GetAllRelaysStatusInBank(System.Byte)">
            <summary>
            Gets the status of all relays in the given bank.
            </summary>
            <param name="bankId">Bank number, 0 - 32</param>
            <returns>Array that holds the status of current selected bank</returns>
            <remarks>
            Returns null if fail to read from COM port. The array contains one item if not all banks are selected.
            A Bank Number of 0 gets the status of all relays in all 32 banks.
            </remarks>
        </member>
        <member name="T:NCD.NCDComponent">
            <summary>
            Provides methods to control relays of ProXR board.
            </summary>
        </member>
        <member name="F:NCD.NCDComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NCD.NCDComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.#ctor">
            <summary>
            Create ProXR Object.
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Create ProXR Object.
            </summary>
            <param name="container">container object</param>
        </member>
        <member name="M:NCD.NCDComponent.OpenPort">
            <summary>
            Open the Com Port
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.ClosePort">
            <summary>
            Close the Com Port
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.Purge">
            <summary>
            Purge the COM Port
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.WriteByte(System.Byte)">
            <summary>
            Write a byte to Com port
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NCD.NCDComponent.WriteBytes(System.Byte[])">
            <summary>
            Write a byte to Com port
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NCD.NCDComponent.WriteBytesWithSleep(System.Int32,System.Byte[])">
            <summary>
            Write bytes array with pace between each byte
            </summary>
            <param name="sleepTime">in millseconds</param>
            <param name="data"></param>
        </member>
        <member name="M:NCD.NCDComponent.WriteString(System.String)">
            <summary>
            Write a string to Com port
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NCD.NCDComponent._ReadByte(System.Byte@)">
            <summary>
            Read a byte from Com Port
            </summary>
            <param name="data">data been read</param>
            <returns>true for success</returns>
        </member>
        <member name="M:NCD.NCDComponent.ReadByte">
            <summary>
            Ready a byte from Com port
            </summary>
            <returns>0 - 255, the data read, -1 for failure</returns>
        </member>
        <member name="M:NCD.NCDComponent.CreateDevices">
            <summary>
            Create all devices here
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.TurnOnReportMode">
            <summary>
            Turns on report mode.
            </summary>
            <remarks>
            Reporting mode, by default, is ON, meaning every time a command is sent to the controller, 
            the controller will send an 85 back to the computer, indicating that the command has finished executing 
            your instructions. We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. 
            A delay between some commands may be required when using 1-Way communications. 
            For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.
            </remarks>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.NCDComponent.TurnOffReportMode">
            <summary>
            Turn off report mode.
            </summary>
            <remarks>
            Reporting mode, by default, is ON, meaning every time a command is sent to the controller, 
            the controller will send an 85 back to the computer, indicating that the command has finished executing 
            your instructions. We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. 
            A delay between some commands may be required when using 1-Way communications. 
            For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.
            </remarks>
            <returns>True for success</returns>
        </member>
        <member name="M:NCD.NCDComponent.SettingPort">
            <summary>
            Show setting port dialog and set the com port and baudrate
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.SettingPort(System.Boolean)">
            <summary>
            Show setting port dialog and set the com port and baudrate
            </summary>
        </member>
        <member name="M:NCD.NCDComponent.Test2Ways">
            <summary>
            Tests 2-Way communications between the PC and the relay controller.
            </summary>
            <returns> true for success</returns>
        </member>
        <member name="M:NCD.NCDComponent.Test2Ways2">
            <summary>
            Test 2 -way communciation between the PC and the relay controller, 
            will return -1 for failure,
            or 85 or 86 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.NCDComponent.Sleep(System.Int32)">
            <summary>
            sleep for specific time
            </summary>
            <param name="ms">millsecond</param>
        </member>
        <member name="E:NCD.NCDComponent.OnWriteData">
            <summary>
            Event raised when there is a byte written to serial port
            </summary>
        </member>
        <member name="E:NCD.NCDComponent.OnReadData">
            <summary>
            Eevent raised when there is a byte read from serial port
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.R2x">
            <summary>
            R2x object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.ZR2x">
            <summary>
            R2x object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.R8xPro">
            <summary>
            R8X Pro object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.PWM">
            <summary>
            PWM object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.ASELPro">
            <summary>
            ASEL Pro object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.IsTwoWay">
            <summary>
            Property for communication in two way.
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.ProXR">
            <summary>
            ProXR Object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.Mesh">
            <summary>
            Get Mesh Object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.Series1">
            <summary>
            Get Series1 type zigBee Object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.Timers">
            <summary>
            Get Timers object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.AdvanceConfiguration">
            <summary>
            Get AdvanceConfiguration object.
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.E3C">
            <summary>
            Get E3C object.
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.TaraList">
            <summary>
            Get TaraList Object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.Reactor">
            <summary>
            Get Reactor object
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the serial port.
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.PortName">
            <summary>
            Represents the name of COM port. Example: COM1
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.BaudRate">
            <summary>
            Represents the baudrate of the Com Port. Example: 38400
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.IPAddress">
            <summary>
            Represents the name of COM port. Example: COM1
            </summary>
        </member>
        <member name="P:NCD.NCDComponent.Port">
            <summary>
            Represents the port number of the connection
            </summary>
        </member>
        <member name="T:NCD.WriteDataEventArgs">
            <summary>
            Define of write data event args
            </summary>
        </member>
        <member name="F:NCD.WriteDataEventArgs.Data">
            <summary>
            Data been written
            </summary>
        </member>
        <member name="M:NCD.WriteDataEventArgs.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="data">data been written</param>
        </member>
        <member name="T:NCD.ReadDataEventArgs">
            <summary>
            Define of read data event args
            </summary>
        </member>
        <member name="F:NCD.ReadDataEventArgs.Data">
            <summary>
            date been read
            </summary>
        </member>
        <member name="F:NCD.ReadDataEventArgs.IsTimeOut">
            <summary>
            flag for timeout
            </summary>
        </member>
        <member name="M:NCD.ReadDataEventArgs.#ctor(System.Byte,System.Boolean)">
            <summary>
            Construct
            </summary>
            <param name="data"></param>
            <param name="isTimeout"></param>
        </member>
        <member name="T:NCD.KeyPress">
            <summary>
            Keypress object 
            </summary>
        </member>
        <member name="F:NCD.KeyPress.E3C">
            <summary>
            E3C number
            </summary>
        </member>
        <member name="F:NCD.KeyPress.Key">
            <summary>
            Key value
            </summary>
        </member>
        <member name="T:NCD.IKeypad">
            <summary>
            Keypad Object Interface
            </summary>
        </member>
        <member name="M:NCD.IKeypad.GetKeypress">
            <summary>
            Get key press. 
            </summary>
            <returns>KeyPress object</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
        </member>
        <member name="M:NCD.IKeypad.GetKeyValue(System.Byte)">
            <summary>
            Get the responding value of key.
            </summary>
            <param name="keyId">id of key: 0-16</param>
            <returns>KeyValue</returns>
            <remarks>It might support more key than 16 in future.</remarks>
            <exception cref="T:System.ArgumentException">Wrong arguement</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.Keypad.NCD#IKeypad#GetKeypress">
            <summary>
            Get Key press 
            </summary>
            <returns>KeyPress object</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
        </member>
        <member name="M:NCD.Keypad.NCD#IKeypad#GetKeyValue(System.Byte)">
            <summary>
            Get the responding value of key
            </summary>
            <param name="keyId">id of key, from 0 to 15</param>
            <returns>KeyValue</returns>
            <remarks>it might support more key than 16 in future</remarks>
            <exception cref="T:System.ArgumentException">Wrong arguement</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.CommBaseObj.Purge">
            <summary>
            discard all data in input buffer
            </summary>
        </member>
        <member name="M:NCD.CommBaseObj.SetParameters(NCD.DeviceConfig)">
            <summary>
            Set Parameters, it will initialize the connection
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NCD.CommBaseObj.Open">
            <summary>
            Open device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CommBaseObj.Close">
            <summary>
            Close device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CommBaseObj.WriteByte(System.Byte)">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.CommBaseObj.WriteBytes(System.Byte[])">
            <summary>
            Write byte array 
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NCD.CommBaseObj.ReadByte">
            <summary>
            Read a byte, return -1 if failure
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCD.CommBaseObj.IsOpen">
            <summary>
            property for if the device is open
            </summary>
        </member>
        <member name="P:NCD.CommBaseObj.ConnectionInfo">
            <summary>
            Property for Connection Infomation
            </summary>
        </member>
        <member name="M:NCD.TcpWrapper.Purge">
            <summary>
            discard all data in input buffer
            </summary>
        </member>
        <member name="M:NCD.TcpWrapper.SetParameters(NCD.DeviceConfig)">
            <summary>
            Set Parameters, it will initialize the connection
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NCD.TcpWrapper.Open">
            <summary>
            Open device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.TcpWrapper.Close">
            <summary>
            Close device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.TcpWrapper.WriteByte(System.Byte)">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.TcpWrapper.WriteBytes(System.Byte[])">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.TcpWrapper.ReadByte">
            <summary>
            Read a byte, return -1 if failure
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCD.TcpWrapper.IsOpen">
            <summary>
            property for if the device is open
            </summary>
        </member>
        <member name="P:NCD.TcpWrapper.ConnectionInfo">
            <summary>
            Property for Connection Infomation
            </summary>
        </member>
        <member name="T:NCD.RelayStatus">
            <summary>
            Status of relay
            </summary>
        </member>
        <member name="F:NCD.RelayStatus.OFF">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:NCD.RelayStatus.ON">
            <summary>
            On
            </summary>
        </member>
        <member name="T:NCD.AutoRefreshSetting">
            <summary>
            Setting of Auto Refresh 
            </summary>
        </member>
        <member name="F:NCD.AutoRefreshSetting.OFF">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:NCD.AutoRefreshSetting.ON">
            <summary>
            On
            </summary>
        </member>
        <member name="T:NCD.IAD12">
            <summary>
            Interface for AD12 
            </summary>
        </member>
        <member name="M:NCD.IAD12.Read8BitsValuesOfBank(System.Byte)">
            <summary>
            Read 8 bits value of specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank) </param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-255) indicates analog value for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,192</description>
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,193</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,194</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 2 </description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 16 bytes of data indicating analog values from 0 to 255 for each of the 16 channels. 
            Data will be sent in the following order from left to right:
            Channel 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 </remarks>
        </member>
        <member name="M:NCD.IAD12.Read8BitsValue(System.Byte,System.Byte)">
            <summary>
            Read 8 bits value of specific channel in specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <param name="channel">Channel Number: 0-15 (0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,195</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,203</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,208</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IAD12.Read12BitsValuesOfBank(System.Byte)">
            <summary>
            Read 12 bits value of specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-4095) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,196</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,197</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,198</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            When the above commands are sent to the controller, the controller will respond with 32 bytes of data indicating analog values from 0 to 
            255 for each of the 16 channels. Data will be sent in the following order from left to right: Channel 0 LSB, 0 MSB, 1 LSB, 1 MSB, 2 LSB,
            2 MSB, 3 LSB, 3 MSB, 4 LSB, 4 MSB, 5 LSB, 5 MSB, 6 LSB, 6 MSB, 7 LSB, 7 MSB, 8 LSB, 8MSB, 9 LSB, 9 MSB, 10 LSB, 10 MSB, 11 LSB, 11 MSB, 
            12 LSB, 12 MSB, 13 LSB, 13 MSB, 14 LSB, 14 MSB, 15 LSB, 15 MSB.        
            </remarks>
        </member>
        <member name="M:NCD.IAD12.Read12BitsValue(System.Byte,System.Byte)">
            <summary>
            Read 12 bits value of specific channel in specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <param name="channel">Channel Number: 0-15 (0 for first channel)</param>
            <returns><para>0-4095</para>The value indicates analog value for the specific channel. </returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,199</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,207</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,209</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IAD12.Read8BitsValuesOfBank2(System.Byte)">
            <summary>
            Read 8 bits values of specific bank with checksum.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-255) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,200</description>
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 0 (Packet Format)</description>
            </item>
            <item>
            <description>254,201</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 1 (Packet Format)</description>
            </item>
            <item>
            <description>254,202</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 2 (Packet Format)</description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 18 bytes of data indicating analog values from 0 to 
            255 for each of the 16 channels. Also included in the data structure is a Header Byte (254), and a Checksum Byte (which is the total
            value of 254 + all 16 bytes of data). The checksum byte only contains the lower 8 bits of data. Data will be sent in the following order from left to right:
            Header Byte 254, Channel 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, Checksum Value</remarks>  
        </member>
        <member name="M:NCD.IAD12.Read12BitsValuesOfBank2(System.Byte)">
            <summary>
            Read 12 bits values of specific bank with checksum.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-4095) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,204</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 0 (Packet Format)</description>
            </item>
            <item>
            <description>254,205</description> 
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 1 (Packet Format)</description>
            </item>
            <item>
            <description>254,206</description> 
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 2 (Packet Format)</description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 34 bytes of data indicating analog values from 0 to 4095 
            for each of the 16 channels. Also included in the data structure is a Header Byte (254), and a Checksum Byte (which is the total value of 254 + all 16 bytes of data). 
            Data will be sent in the following order from left to right: Header Byte 254, Channel 0 LSB, 0 MSB, 1 LSB, 1 MSB, 2 LSB, 2 MSB, 3 LSB, 3 MSB, 4 LSB, 4 MSB, 
            5 LSB, 5 MSB, 6 LSB, 6 MSB, 7 LSB, 7 MSB, 8 LSB, 8 MSB, 9 LSB, 9 MSB, 10 LSB, 10 MSB, 11 LSB, 11 MSB, 12 LSB, 12 MSB, 13 LSB, 13 MSB, 14 LSB, 14 MSB, 15 LSB, 
            15MSB, Checksum Value.</remarks> 
        </member>
        <member name="T:NCD.IAD8">
            <summary>
            Interface for AD8
            </summary>
        </member>
        <member name="M:NCD.IAD8.Read8BitsValue(System.Byte)">
            <summary>
            Read 8-bit A/D value for specific channel.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>0-255</para>
            The value indicates the voltage on the selected input channel.</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,150</description>
            <description>Read 8-Bit A/D Channel 1</description>
            </item>
            <item>
            <description>254,151</description>
            <description>Read 8-Bit A/D Channel 2</description>
            </item>
            <item>
            <description>254,152</description>
            <description>Read 8-Bit A/D Channel 3</description>
            </item>
            <item>
            <description>254,153</description>
            <description>Read 8-Bit A/D Channel 4</description>
            </item>
            <item>
            <description>254,154</description>
            <description>Read 8-Bit A/D Channel 5</description>
            </item>
            <item>
            <description>254,155</description>
            <description>Read 8-Bit A/D Channel 6</description>
            </item>
            <item>
            <description>254,156</description>
            <description>Read 8-Bit A/D Channel 7</description>
            </item>
            <item>
            <description>254,157</description>
            <description>Read 8-Bit A/D Channel 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IAD8.ReadAllChannels8BitsValues">
            <summary>
            Read 8-bit value for all channels.
            </summary>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 8. Each value(0-255) indicates analog value for each of 8 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,166</description>
            <description>Read 8-Bit A/D All Channels</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IAD8.Read10BitsValue(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>0-1023</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,158</description>
            <description>Read 10-Bit A/D Channel 1</description>
            </item>
            <item>
            <description>254,159</description>
            <description>Read 10-Bit A/D Channel 2</description>
            </item>
            <item>
            <description>254,160</description>
            <description>Read 10-Bit A/D Channel 3</description>
            </item>
            <item>
            <description>254,161</description>
            <description>Read 10-Bit A/D Channel 4</description>
            </item>
            <item>
            <description>254,162</description>
            <description>Read 10-Bit A/D Channel 5</description>
            </item>
            <item>
            <description>254,163</description>
            <description>Read 10-Bit A/D Channel 6</description>
            </item>
            <item>
            <description>254,164</description>
            <description>Read 10-Bit A/D Channel 7</description>
            </item>
            <item>
            <description>254,165</description>
            <description>Read 10-Bit A/D Channel 8</description>
            </item>        
            </list>
            <para>The controller returns 2 bytes indicating the voltage on the selected input channel.</para>
            <para>The first returned value is the Most Significant Byte MSB, 
            the second byte sent to your computer will be the Least Significant Byte LSB.</para> 
            Using the formula VALUE= (LSB + (MSB * 256)), where VALUE will equate to a numeric value from 0 to 1023.        
            </remarks>
        </member>
        <member name="M:NCD.IAD8.ReadAllChannels10BitsValues">
            <summary>
            Read 10 bits value for all channels.
            </summary>
            <returns><para>Array of interger type.</para>
            <para>The length of the array is 8. Each value(0-1023) indicates the voltage of each channel.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,167</description>
            <description>Read 10-Bit A/D All Channels</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IAD8.ReadDegC(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel and get temperature in centigrade.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>Temperature value in centigrade.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.IAD8.ReadDegF(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel and get temperature in fahrenheit.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>Temperature value in fahrenheit.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read8BitsValuesOfBank(System.Byte)">
            <summary>
            Read 8 bits value of specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank) </param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-255) indicates analog value for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,192</description>
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,193</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,194</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 2 </description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 16 bytes of data indicating analog values from 0 to 255 for each of the 16 channels. 
            Data will be sent in the following order from left to right:
            Channel 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15 </remarks>
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read8BitsValue(System.Byte,System.Byte)">
            <summary>
            Read 8 bits value of specific channel in specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <param name="channel">Channel Number: 0-15 (0 for first channel)</param>
            <returns><para>0-255</para>The value indicates analog value for the specific channel.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,195</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,203</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,208</description>
            <description>Read Single Channel at a Time, 8-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read12BitsValuesOfBank(System.Byte)">
            <summary>
            Read 12 bits value of specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-4095) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,196</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,197</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,198</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            When the above commands are sent to the controller, the controller will respond with 32 bytes of data indicating analog values from 0 to 
            255 for each of the 16 channels. Data will be sent in the following order from left to right: Channel 0 LSB, 0 MSB, 1 LSB, 1 MSB, 2 LSB,
            2 MSB, 3 LSB, 3 MSB, 4 LSB, 4 MSB, 5 LSB, 5 MSB, 6 LSB, 6 MSB, 7 LSB, 7 MSB, 8 LSB, 8MSB, 9 LSB, 9 MSB, 10 LSB, 10 MSB, 11 LSB, 11 MSB, 
            12 LSB, 12 MSB, 13 LSB, 13 MSB, 14 LSB, 14 MSB, 15 LSB, 15 MSB.
            </remarks>
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read12BitsValue(System.Byte,System.Byte)">
            <summary>
            Read 12 bits value of specific channel in specific bank.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <param name="channel">Channel Number: 0-15 (0 for first channel)</param>
            <returns><para>0-4095</para>The value indicates analog value for the specific channel. </returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,199</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 0</description>
            </item>
            <item>
            <description>254,207</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 1</description>
            </item>
            <item>
            <description>254,209</description>
            <description>Read Single Channel at a Time, 12-Bit A/D Device Bank 2</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read8BitsValuesOfBank2(System.Byte)">
            <summary>
            Read 8 bits values of specific bank with checksum.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-255) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,200</description>
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 0 (Packet Format)</description>
            </item>
            <item>
            <description>254,201</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 1 (Packet Format)</description>
            </item>
            <item>
            <description>254,202</description> 
            <description>Read 16 Channels at a Time, 8-Bit A/D Device Bank 2 (Packet Format)</description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 18 bytes of data indicating analog values from 0 to 
            255 for each of the 16 channels. Also included in the data structure is a Header Byte (254), and a Checksum Byte (which is the total
            value of 254 + all 16 bytes of data). The checksum byte only contains the lower 8 bits of data. Data will be sent in the following order from left to right:
            Header Byte 254, Channel 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, Checksum Value</remarks>         
        </member>
        <member name="M:NCD.AD12.NCD#IAD12#Read12BitsValuesOfBank2(System.Byte)">
            <summary>
            Read 12 bits values of specific bank with checksum.
            </summary>
            <param name="bank">Bank Number: 0-2 (0 for first bank)</param>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 16. Each value(0-4095) indicates analog values for each of the 16 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:NCD.ChecksumException">Checksum Error</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,204</description>
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 0 (Packet Format)</description>
            </item>
            <item>
            <description>254,205</description> 
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 1 (Packet Format)</description>
            </item>
            <item>
            <description>254,206</description> 
            <description>Read 16 Channels at a Time, 12-Bit A/D Device Bank 2 (Packet Format)</description>
            </item>
            </list>
            When the above commands are sent to the controller, the controller will respond with 34 bytes of data indicating analog values from 0 to 4095 
            for each of the 16 channels. Also included in the data structure is a Header Byte (254), and a Checksum Byte (which is the total value of 254 + all 16 bytes of data). 
            Data will be sent in the following order from left to right: Header Byte 254, Channel 0 LSB, 0 MSB, 1 LSB, 1 MSB, 2 LSB, 2 MSB, 3 LSB, 3 MSB, 4 LSB, 4 MSB, 
            5 LSB, 5 MSB, 6 LSB, 6 MSB, 7 LSB, 7 MSB, 8 LSB, 8 MSB, 9 LSB, 9 MSB, 10 LSB, 10 MSB, 11 LSB, 11 MSB, 12 LSB, 12 MSB, 13 LSB, 13 MSB, 14 LSB, 14 MSB, 15 LSB, 
            15MSB, Checksum Value.</remarks>  
        </member>
        <member name="M:NCD.AD12._Read8BitsValue">
            <summary>
            Read 8 bit value.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD12._Read16BitsValueForAD12">
            <summary>
            Read 16 bit value, lsb first.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD12._Read16BitsValue">
            <summary>
            Read 16 bit value, msb first.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#Read8BitsValue(System.Byte)">
            <summary>
            Read 8-bit A/D value for specific channel.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>0-255</para>
            The value indicates the voltage on the selected input channel.</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,150</description>
            <description>Read 8-Bit A/D Channel 1</description>
            </item>
            <item>
            <description>254,151</description>
            <description>Read 8-Bit A/D Channel 2</description>
            </item>
            <item>
            <description>254,152</description>
            <description>Read 8-Bit A/D Channel 3</description>
            </item>
            <item>
            <description>254,153</description>
            <description>Read 8-Bit A/D Channel 4</description>
            </item>
            <item>
            <description>254,154</description>
            <description>Read 8-Bit A/D Channel 5</description>
            </item>
            <item>
            <description>254,155</description>
            <description>Read 8-Bit A/D Channel 6</description>
            </item>
            <item>
            <description>254,156</description>
            <description>Read 8-Bit A/D Channel 7</description>
            </item>
            <item>
            <description>254,157</description>
            <description>Read 8-Bit A/D Channel 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#ReadAllChannels8BitsValues">
            <summary>
            Read 8-bit value for all channels.
            </summary>
            <returns> <para>Array of interger type.</para>
            <para>The length of the array is 8. Each value(0-255) indicates analog value for each of 8 channels.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,166</description>
            <description>Read 8-Bit A/D All Channels</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#Read10BitsValue(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>0-1023</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,158</description>
            <description>Read 10-Bit A/D Channel 1</description>
            </item>
            <item>
            <description>254,159</description>
            <description>Read 10-Bit A/D Channel 2</description>
            </item>
            <item>
            <description>254,160</description>
            <description>Read 10-Bit A/D Channel 3</description>
            </item>
            <item>
            <description>254,161</description>
            <description>Read 10-Bit A/D Channel 4</description>
            </item>
            <item>
            <description>254,162</description>
            <description>Read 10-Bit A/D Channel 5</description>
            </item>
            <item>
            <description>254,163</description>
            <description>Read 10-Bit A/D Channel 6</description>
            </item>
            <item>
            <description>254,164</description>
            <description>Read 10-Bit A/D Channel 7</description>
            </item>
            <item>
            <description>254,165</description>
            <description>Read 10-Bit A/D Channel 8</description>
            </item>        
            </list>
            <para>The controller 2 bytes indicating the voltage on the selected input channel.</para>
            <para>The first returned value is the Most Significant Byte MSB, 
            the second byte sent to your computer will be the Least Significant Byte LSB.</para> 
            Using the formula VALUE= (LSB + (MSB * 256)), where VALUE will equate to a numeric value from 0 to 1023.
            </remarks>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#ReadAllChannels10BitsValues">
            <summary>
            Read 10 bits value for all channels.
            </summary>
            <returns><para>Array of interger type.</para>
            <para>The length of the array is 8. Each value(0-1023) indicates the voltage of each channel.</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,167</description>
            <description>Read 10-Bit A/D All Channels</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#ReadDegC(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel and get temperature in centigrade.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>Temperature value in centigrade.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD8.NCD#IAD8#ReadDegF(System.Byte)">
            <summary>
            Read 10-bit A/D value for specific channel and get temperature in fahrenheit.
            </summary>
            <param name="channel">Channel number: 0-7, 0 for first channel</param>
            <returns><para>Temperature value in fahrenheit.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD8._Read8BitsValue">
            <summary>
            Read 8 bit value.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD8._Read16BitsValueForAD12">
            <summary>
            Read 16 bit value, lsb first.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.AD8._Read16BitsValue">
            <summary>
            Read 16 bit value, msb first.
            </summary>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="T:NCD.IR8XPro">
            <summary>
            R4xPro/R8xPro Object interface
            </summary>
        </member>
        <member name="M:NCD.IR8XPro.TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,0</description>
            <description>Turn Off Relay 1</description>
            </item>
            <item>
            <description>254,1</description>
            <description>Turn Off Relay 2</description>
            </item> 
            <item>
            <description>254,2</description>
            <description>Turn Off Relay 3</description>
            </item>
            <item>
            <description>254,3</description>
            <description>Turn Off Relay 4</description>
            </item> 
            <item>
            <description>254,4</description>
            <description>Turn Off Relay 5</description>
            </item>
            <item>
            <description>254,5</description>
            <description>Turn Off Relay 6</description>
            </item> 
            <item>
            <description>254,6</description>
            <description>Turn Off Relay 7</description>
            </item>
            <item>
            <description>254,7</description>
            <description>Turn Off Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,8</description>
            <description>Turn On Relay 1</description>
            </item>
            <item>
            <description>254,9</description>
            <description>Turn On Relay 2</description>
            </item> 
            <item>
            <description>254,10</description>
            <description>Turn On Relay 3</description>
            </item>
            <item>
            <description>254,11</description>
            <description>Turn On Relay 4</description>
            </item> 
            <item>
            <description>254,12</description>
            <description>Turn On Relay 5</description>
            </item>
            <item>
            <description>254,13</description>
            <description>Turn On Relay 6</description>
            </item> 
            <item>
            <description>254,14</description>
            <description>Turn On Relay 7</description>
            </item>
            <item>
            <description>254,15</description>
            <description>Turn On Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.GetStatus(System.Byte)">
            <summary>
            Get status of individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,16</description>
            <description>Get status of Relay 1</description>
            </item>
            <item>
            <description>254,17</description>
            <description>Get status of Relay 2</description>
            </item> 
            <item>
            <description>254,18</description>
            <description>Get status of Relay 3</description>
            </item>
            <item>
            <description>254,19</description>
            <description>Get status of Relay 4</description>
            </item> 
            <item>
            <description>254,20</description>
            <description>Get status of Relay 5</description>
            </item>
            <item>
            <description>254,21</description>
            <description>Get status of Relay 6</description>
            </item> 
            <item>
            <description>254,22</description>
            <description>Get status of Relay 7</description>
            </item>
            <item>
            <description>254,23</description>
            <description>Get status of Relay 8</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.GetStatusOfAllRelays">
            <summary>
            Get status of all relays at one time in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,24</description>
            <description>Get status of All Relays </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.StorePowerUpSatus">
            <summary>
            Store current status of relays as power-up default in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,25</description>
            <description>Store Relay Pattern as Power-Up Default</description>
            </item>
            </list>
            <para>This command allows you to define the on/off status of all relays when 
            power is first applied to the board.</para>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.ReadPowerUpDefaultStatus">
            <summary>
            Get the stored power-up default status of relays in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,26</description>
            <description>Get the Power-Up Default Relay Pattern</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.TurnOnReportMode">
            <summary>
            Turn on reporting mode.
            </summary>
            <returns><para>True for success</para></returns>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,27</description>
            <description>Turn Reporting Mode ON</description>
            </item>
            </list>        
            <para>Reporting mode, by default, is ON. That means every time a command is sent to the controller, 
            the controller will send code 85 back to the computer, indicating that the command has finished executing 
            your instructions.</para> We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. 
            A delay between some commands may be required when using 1-Way communications. 
            For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.TurnOffReportMode">
            <summary>
            Turn off reporting mode.
            </summary>
            <returns><para>True for success</para></returns>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,28</description>
            <description>Turn Reporting Mode OFF</description>
            </item>
            </list>        
            <para>Reporting mode, by default, is ON. That means every time a command is sent to the controller, 
            the controller will send code 85 back to the computer, indicating that the command has finished executing 
            your instructions.</para> We recommend leaving it on, but doing so requires 2-Way communication with the controller. 
            You should turn it off if you intend to use 1-Way communication only. 
            A delay between some commands may be required when using 1-Way communications. 
            For optimum reliability, leave reporting mode on and use 2-Way communications with the IProXR Series controllers.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.TurnOnAllRelays">
            <summary>
            Turn all relays on.
            </summary>
            <returns><para>True for success</para></returns> 
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,30</description>
            <description>Turn All Relays ON</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.TurnOffAllRelays">
            <summary>
            Turn all relays off.
            </summary>
            <returns><para>True for success</para></returns> 
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,29</description>
            <description>Turn All Relays OFF</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.InvertAllRelays">
            <summary>
            Invert status of all relays.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,31</description>
            <description>Invert All Relays</description>
            </item>
            </list>
            <para>All relays that are currently off turn on, all relays that were on turn off.</para>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.ReverseAllRelays">
            <summary>
            Reverse status of relays 12345678 to 87654321.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,32</description>
            <description>Reverse Relay Order</description>
            </item>
            </list>
            <para>This command does not permanently reassign relays, it only copies the status of the relays when executed.</para>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.Test2Ways">
            <summary>
            Tests 2-Way communication between PC and relay controller.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,33</description>
            <description>Test 2-Way Communication</description>
            </item>
            </list>
            <para>This command should be used for initial installations if 2-way communication is required. 
            It can also be used to detect the presence of a relay controller on the serial port.</para>
            </remarks>         
        </member>
        <member name="M:NCD.IR8XPro.SetRelayStatus(System.Byte)">
            <summary>
            Set status of all relays at one time. 
            </summary>
            <param name="status"><para>0-15 for R4x Pro</para>
            <para>0-255 for R8x Pro</para></param>
            <returns><para>True for success</para></returns>  
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,40,0-15</description>
            <description>Set Status of All Relays (R4x Pro)</description>
            </item>
            <item>
            <description>254,40,0-255</description>
            <description>Set Status of All Relays (R8x Pro)</description>
            </item>
            </list>
            This allows you to easily set status of all relays at one time. 
            Status is a parameter value from 0-255. A value of 0 turns off all the relays. A value of 255 turns on all the relays. 
            Other values set the status of the relays in the equivalent binary pattern of the relayData parameter value.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.ProgramEmulationDeviceNumber(System.Byte)">
            <summary>
            Program Emulation Device Number
            </summary>
            <param name="deviceNum">0-15</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Augument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,41,0-15</description>
            <description>Program Emulation Device Number</description>
            </item>
            </list>
            When the R4x/R8x Pro is NOT in emulation mode, this command can
            be used, along with its parameter of 0-15, to define the device number
            for use in emulation mode. Once programmed, you must remove
            power from the board and set the board to Emulation mode.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.StoreRelayPatternInMemoryBank(System.Byte)">
            <summary>
            Store current pattern of all relays into memory bank.
            </summary>
            <param name="bankId">Bank Number: 0-15</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,42,0-15</description>
            <description>Store Relay Pattern in Memory Bank</description>
            </item>
            </list>
            This command stores the current on/off setting of  all relays into a memory bank (0-15). 
            This command is useful for creating macros or for making sure certain relays are never activated simultaneously.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.RecallRelayPatternFromMemoryBank(System.Byte)">
            <summary>
            Recall stored relay pattern from selected memory bank. 
            </summary>
            <param name="bankId">Bank Number: 0-15</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>        
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,43,0-15</description>
            <description>Recall Relay Pattern from Memory Bank</description>
            </item>
            </list>
            This command recalls a stored relay pattern from the user selected memory bank (0-15) 
            and update all relays on the board to the settings defined by command "254,42,0-15".
            </remarks>  
        </member>
        <member name="M:NCD.IR8XPro.SelectRelay(System.Byte)">
            <summary>
            Turn off all relays and then turn on the selected relay only. 
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,44,0-3</description>
            <description>Select a Relay for Activation (R4x Pro)</description>
            </item>
            <item>
            <description>254,44,0-7</description>
            <description>Select a Relay for Activation (R8x Pro)</description>
            </item>        
            </list>
            The command performs a safe "Break Before Make", ensuring that no two relays are ever activated at the same time.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.DeselectRelay(System.Byte)">
            <summary>
            Turn on all relays and turn off the selected relay only.
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,45,0-3</description>
            <description>Select a Relay for De-Activation (R4x Pro)</description>
            </item>
            <item>
            <description>254,45,0-7</description>
            <description>Select a Relay for De-Activation (R8x Pro)</description>
            </item>        
            </list>
            The command performs a safe "Break Before Make", ensuring that no two relays are ever activated at the same time.
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.ToggleRelay(System.Byte)">
            <summary>
            Reverse current on/off status of the selected relay.
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,46,0-3</description>
            <description>Toggle Status of the selected Relay (R4x Pro)</description>
            </item>
            <item>
            <description>254,46,0-7</description>
            <description>Toggle Status of the selected Relay (R8x Pro)</description>
            </item>        
            </list>
            This command reverses the current on/off status of the selected relay.
            </remarks>        
        </member>
        <member name="M:NCD.IR8XPro.SetRelayTimerInMilliSeconds(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Activate a relay for a user-defined period of time.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 0=(10 milliseconds x Duration) + 10 milliseconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback: True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,47,Time(0-255), Relay(0-3)</description>
            <description>Set Relay Timer (R4x Pro)</description>
            </item>
            <item>
            <description>254,47,Time(0-255), Relay(0-7)</description>
            <description>Set Relay Timer (R8x Pro)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.SetRelayTimerInSeconds(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Activate a relay for a user-defined period of time.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 64=(.5 seconds x Duration) + .5 seconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback: True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,47,Time(0-255), Relay(0-3)</description>
            <description>Set Relay Timer (R4x Pro)</description>
            </item>
            <item>
            <description>254,47,Time(0-255), Relay(0-7)</description>
            <description>Set Relay Timer (R8x Pro)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.SetMultiRelayTimerInMilliSeconds(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set the status of relays, apply a timer, set all relays to a new state once the timer has completed.
            </summary>
            <param name="startStatus">It indicats the status when timer start.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="stopStatus">It indicats the status when timer stop.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 0=(10 milliseconds x Duration) + 10 milliseconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback: True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,48,Time(0-255), RPOn(0-15), RPOff(0-15)</description>
            <description>Relay Pattern Select on a Timer (R4x Pro)</description>
            </item>
            <item>
            <description>254,48,Time(0-255), RPOn(0-255), RPOff(0-255)</description>
            <description>Relay Pattern Select on a Timer (R8x Pro)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IR8XPro.SetMultiRelayTimerInSeconds(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set the status of relays, apply a timer, set all relays to a new state once the timer has completed.
            </summary>
            <param name="startStatus">It indicats the status when timer start.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="stopStatus">It indicats the status when timer stop.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 64=(.5 seconds x Duration) + .5 seconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback: True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,48,Time(0-255), RPOn(0-15), RPOff(0-15)</description>
            <description>Relay Pattern Select on a Timer (R4x Pro)</description>
            </item>
            <item>
            <description>254,48,Time(0-255), RPOn(0-255), RPOff(0-255)</description>
            <description>Relay Pattern Select on a Timer (R8x Pro)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOffRelay(System.Byte)">
            <summary>
            Turn off individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn off relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOnRelay(System.Byte)">
            <summary>
            Turn on individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay number: 0-7</param>
            <returns><para>True or False</para>
            <para>True for turn on relay successfully.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#GetStatus(System.Byte)">
            <summary>
            Get status of individual relay in current selected bank.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <returns><para>ON or OFF</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#GetStatusOfAllRelays">
            <summary>
            Get status of all relays at one time in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#StorePowerUpSatus">
            <summary>
            Store status of relays as power-up default in current selected bank.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#ReadPowerUpDefaultStatus">
            <summary>
            Get the stored power-up default status of relays in current selected bank.
            </summary>
            <returns><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para>
            <para>The binary pattern of the value returned directly corresponds to the on/off status of each relay.</para></returns>        
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOnReportMode">
            <summary>
            Turn on reporting mode.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOffReportMode">
            <summary>
            Turn off reporting mode.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOnAllRelays">
            <summary>
            Turn all relays on.
            </summary>
            <returns><para>True for success</para></returns> 
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#TurnOffAllRelays">
            <summary>
            Turn all relays off.
            </summary>
            <returns><para>True for success</para></returns> 
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#InvertAllRelays">
            <summary>
            Invert status of all relays.
            </summary>
            <returns><para>True for success</para></returns> 
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#ReverseAllRelays">
            <summary>
            Reverse relay order.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#Test2Ways">
            <summary>
            Tests 2-Ways communication between PC and relay controller.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SetRelayStatus(System.Byte)">
            <summary>
            Set status of all relays at one time. 
            </summary>
            <param name="status"><para>0-255 for R8x Pro</para>
            <para>0-15 for R4x Pro</para></param>
            <returns><para>True for success</para></returns>        
            <remarks>
            This allows you to easily set the status of 8 relays at one time. 
            Status is a parameter value from 0-255. A value of 0 turns off all the relays. A value of 255 turns on all the relays. 
            Other values set the status of the relays in the equivalent binary pattern of the relayData parameter value.
            </remarks>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#ProgramEmulationDeviceNumber(System.Byte)">
            <summary>
            Program Emulation Device Number
            </summary>
            <param name="deviceNum">0-15</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Augument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#StoreRelayPatternInMemoryBank(System.Byte)">
            <summary>
            Store current pattern of all relays into memory bank.
            </summary>
            <param name="bankId">Bank Number: 0-15</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#RecallRelayPatternFromMemoryBank(System.Byte)">
            <summary>
            Recall stored relay pattern from selected memory bank. 
            </summary>
            <param name="bankId">Bank Number: 0-15</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SelectRelay(System.Byte)">
            <summary>
            Turn off all relays and then turns on the selected relay only. 
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#DeselectRelay(System.Byte)">
            <summary>
            Turn on all relays and turn off the selected relay only.
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns>  
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#ToggleRelay(System.Byte)">
            <summary>
            Reverse current on/off status of the selected relay.
            </summary>
            <param name="relayId">Relay Number: 0-3 for R4x Pro, 0-7 for R8x Pro</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SetRelayTimerInMilliSeconds(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Activate a relay for a user-defined period of time.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 0=(10 milliseconds x Duration) + 10 milliseconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback:True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SetRelayTimerInSeconds(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Activate a relay for a user-defined period of time.
            </summary>
            <param name="relayId">Relay Number: 0-7</param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 64=(.5 seconds x Duration) + .5 seconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback:True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SetMultiRelayTimerInMilliSeconds(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set the status of relays, apply a timer, set all relays to a new state once the timer has completed.
            </summary>
            <param name="startStatus">It indicats the status when timer start.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="stopStatus">It indicats the status when timer stop.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 0=(10 milliseconds x Duration) + 10 milliseconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback:True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="M:NCD.R8XPro.NCD#IR8XPro#SetMultiRelayTimerInSeconds(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set the status of relays, apply a timer, set all relays to a new state once the timer has completed.
            </summary>
            <param name="startStatus">It indicats the status when timer start.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="stopStatus">It indicats the status when timer stop.<para>0-15(R4x Pro)</para><para>0-255(R8x Pro)</para></param>
            <param name="time"><para>Duration to turn on relay: 0-63</para> <para>Duration Interval: 64=(.5 seconds x Duration) + .5 seconds</para>
            <para>To use the different modes of the timer, simply add together the values 
            for each parameter. Feed the total into the TIME variable above. Then select the relay to apply the timer to.</para></param>
            <param name="feedBack"><para>Flag for Feedback:True or False</para><para>Ture for turning on Feedback, False for turning off Feedback</para></param>
            <returns><para>True or False.</para>
            <para>Always return True if parameter feedback is False. If parameter feedback is True, return True for getting correct feedback.</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
        </member>
        <member name="T:NCD.Math">
            <summary>
            NCD.Math contains help functions for calculate bit and byte 
            </summary>
        </member>
        <member name="M:NCD.Math.GetBitValue(System.Byte,System.Byte)">
            <summary>
            Get bit value of spacific position
            </summary>
            <param name="value">byte value, from 0 to 255</param>
            <param name="pos">bit position , from 0 to 7</param>
            <returns>0 or 1</returns>
        </member>
        <member name="M:NCD.Math.GetBitBoolValue(System.Byte,System.Byte)">
            <summary>
            Get bool value of specific position
            </summary>
            <param name="value"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.Math.SetBitBoolValue(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Set the specific bit to specific value
            </summary>
            <param name="value"></param>
            <param name="pos"></param>
            <param name="isBitOn"></param>
            <returns>value with specific bit set</returns>
        </member>
        <member name="M:NCD.Math.SetBitValue(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the specific bit to specific value
            </summary>
            <param name="value"></param>
            <param name="pos"></param>
            <param name="bitValue">0 for turn off, other value to turn on</param>
            <returns>value with specific bit set</returns>
        </member>
        <member name="T:NCD.PortData">
            <summary>
            use for port data
            </summary>
        </member>
        <member name="M:NCD.PortData.#ctor(System.String)">
            <summary>
            construct portData object with specified port name
            </summary>
            <param name="name">specified port name</param>
        </member>
        <member name="M:NCD.CommunicationLayer.#ctor">
            <summary>
            Construction
            </summary>
        </member>
        <member name="M:NCD.CommunicationLayer.Purge">
            <summary>
            discard all data in input buffer
            </summary>
        </member>
        <member name="M:NCD.CommunicationLayer.SetParameters(NCD.DeviceConfig)">
            <summary>
            Set Parameters, it will initialize the connection
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NCD.CommunicationLayer.Open">
            <summary>
            Open device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CommunicationLayer.Close">
            <summary>
            Close device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CommunicationLayer.WriteByte(System.Byte)">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.CommunicationLayer.WriteBytes(System.Byte[])">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.CommunicationLayer.ReadByte">
            <summary>
            Read a byte, return -1 if failure
            </summary>
            <returns></returns>
        </member>
        <member name="E:NCD.CommunicationLayer.UpdateConnectionStatus">
            <summary>
            callback for update connection status
            </summary>
        </member>
        <member name="P:NCD.CommunicationLayer.IsOpen">
            <summary>
            property for if the device is open
            </summary>
        </member>
        <member name="P:NCD.CommunicationLayer.ConnectionInfo">
            <summary>
            Property for Connection Infomation
            </summary>
        </member>
        <member name="M:NCD.ComPortWrapper.Purge">
            <summary>
            discard all data in input buffer
            </summary>
        </member>
        <member name="M:NCD.ComPortWrapper.SetParameters(NCD.DeviceConfig)">
            <summary>
            Set Parameters, it will initialize the connection
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NCD.ComPortWrapper.Open">
            <summary>
            Open device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.ComPortWrapper.Close">
            <summary>
            Close device
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.ComPortWrapper.WriteByte(System.Byte)">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.ComPortWrapper.WriteBytes(System.Byte[])">
            <summary>
            Write a byte 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NCD.ComPortWrapper.ReadByte">
            <summary>
            Read a byte, return -1 if failure
            </summary>
            <returns></returns>
        </member>
        <member name="P:NCD.ComPortWrapper.IsOpen">
            <summary>
            property for if the device is open
            </summary>
        </member>
        <member name="P:NCD.ComPortWrapper.ConnectionInfo">
            <summary>
            Property for Connection Infomation
            </summary>
        </member>
        <member name="T:NCD.TimerParameters">
            <summary>
            Represents the parameters of timer.
            </summary>
        </member>
        <member name="F:NCD.TimerParameters.timerId">
            <summary>
            Represents index of the timer, 0 - 15.
            </summary>
        </member>
        <member name="F:NCD.TimerParameters.hours">
            <summary>
            Represents hours, 0 - 255.
            </summary>
        </member>
        <member name="F:NCD.TimerParameters.minutes">
            <summary>
            Represents minutes, 0 - 255.
            </summary>
        </member>
        <member name="F:NCD.TimerParameters.seconds">
            <summary>
            Represents seconds, 0 - 255.
            </summary>
        </member>
        <member name="F:NCD.TimerParameters.relayId">
            <summary>
            Represents Relay Number, 0 -255.
            </summary>
        </member>
        <member name="T:NCD.ITimers">
            <summary>
            Represents the timer interface.
            </summary>
        </member>
        <member name="M:NCD.ITimers.SetDurationTimerImmediately(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets simple duration timer, begins operation immediately.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,50+TimerNumber,Hours,Minutes,Seconds,RelayId</description>
            <description>Set Simple Duration Timer</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.SetPulseTimerImmediately(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets simple pulse timer, begins operation immediately.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,70+TimerNumber,Hours,Minutes,Seconds,RelayId</description>
            <description>Set Simple Pulse Timer</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.SetDurationTimer(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets duration timer, but does not begin operation until they are activated.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,90+TimerNumber,Hours,Minutes,Seconds,RelayId</description>
            <description>Set Duration Timer(need to be activated)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.SetPulseTimer(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets pulse timer, but does not begin operation until they are activated.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,110+TimerNumber,Hours,Minutes,Seconds,RelayId</description>
            <description>Set Pulse Timer(need to be activated)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.ActivateTimers(System.Byte,System.Byte)">
            <summary>
            Activate timer. 
            </summary>
            <param name="lsb">Least Significant Byte: 0-255</param>
            <param name="msb">Most Significant Byte: 0-255</param>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,131,LSB,MSB</description>
            <description>Activate Timer</description>
            </item>
            </list>
            A binary 0 in any bit location indicates the timer is off 
            while a binary 1 in any bit location indicates the timer is on. 
            </remarks>
        </member>
        <member name="M:NCD.ITimers.TimerQuery(System.Byte)">
            <summary>
            View current remain time for the selected timer.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <returns>Remain Time</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,130,TimerNumber</description>
            <description>Query Selected Timer</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.SetTimerCalibration(System.Int32)">
            <summary>
            Sets the timer calibration value.
            </summary>
            <param name="calibrator">Calibration Value: 26576
            <para>Timing is generically recalibrated for 60 seconds using 8 timers. Our test controller calibration value was 26,576.
            In other words, a calibration value of 26,576 equals 1 second when the controller is only processing timing tasks.</para>
            <para>The calibration value was established on our prototype and may be off by as much as 3% based on individual resonator,
            processor, and temperature characteristics. Baud rate was set at 115.2K when this number was established. 
            The calibration value may need to be changed for other baud rates, but 115.2K baud is the best choice for calibration.</para></param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,132,LSB,MSB</description>
            <description>Set the Timer Calibration Value</description>
            </item>
            </list>
            <para>Calibrator = 26576</para>
            <para>LSB = (Calibrator And 255)</para>
            <para>MSB = (Calibrator And 65280) / 256</para>
            </remarks> 
        </member>
        <member name="M:NCD.ITimers.ReadTimerCalibration">
            <summary>
            Reads the timer calibration value.
            </summary>
            <returns>Calibration Value</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,133</description>
            <description>Read the Timer Calibration Value</description>
            </item>
            </list>
            <para>This command returns two bytes of data. </para>
            <para>The first byte contains the Timer Calibrator LSB value.</para>
            <para>The second byte contains the Timer Calibrator MSB value.</para>
            <para>Calibrator = (LSB + (MSB * 256))</para>
            </remarks>
        </member>
        <member name="M:NCD.ITimers.ActivateCalibratorMarker">
            <summary>
            Activates time calibrator markers.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,134</description>
            <description>Activate Calibrator Makers</description>
            </item>
            </list>
            Time calibrator markers are used to help calibrate the timer.
            </remarks>        
        </member>
        <member name="M:NCD.ITimers.DeactivateCalibratorMarker">
            <summary>
            Deactivates time calibrator markers.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,50,135</description>
            <description>Deactivate Calibrator Markers</description>
            </item>
            </list> 
            Time calibrator markers are used to help calibrate the timer.
            </remarks>     
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#SetDurationTimerImmediately(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets simple duration timer, begins operation immediately.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#SetPulseTimerImmediately(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets simple pulse timer, begins operation immediately.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#SetDurationTimer(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets duration timer, but does not begin operation until they are activated.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#SetPulseTimer(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets simple pulse timer, but does not begin operation until they are activated.
            </summary>
            <param name="timerId">Timer Number: 0-15</param>
            <param name="hours">Hours: 0-255</param>
            <param name="minutes">Minutes: 0-255</param>
            <param name="seconds">Seconds: 0-255</param>
            <param name="relayId">Relay Number: 0-255</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#ActivateTimers(System.Byte,System.Byte)">
            <summary>
            Activate timer. 
            </summary>
            <param name="lsb">Least Significant Byte: 0-256</param>
            <param name="msb">Most Significant Byte: 0-256</param>
            <returns><para>True for success</para></returns>         
            <remarks>
            A binary 0 in any bit location indicates the timer is off 
            while a binary 1 in any bit location indicates the timer is on. 
            </remarks>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#TimerQuery(System.Byte)">
            <summary>
            Allows to see how much time remains before the timer expires.
            </summary>
            <param name="timerId">Timer number, 0 - 15</param>
            <returns>Return remain time.</returns>
            <exception cref="T:System.ArgumentException">Wrong Argument</exception>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#SetTimerCalibration(System.Int32)">
            <summary>
            Sets the timer calibration value.
            </summary>
            <param name="calibrator">Calibration Value:</param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#ReadTimerCalibration">
            <summary>
            Reads the timer calibration value.
            </summary>
            <returns>Calibration Value.</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#ActivateCalibratorMarker">
            <summary>
            Activates time calibrator markers.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CTimers.NCD#ITimers#DeactivateCalibratorMarker">
            <summary>
            Deactivates time calibrator markers.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="T:NCD.ISeries1">
            <summary>
            ZigBee Serial1 Object
            </summary>
        </member>
        <member name="M:NCD.ISeries1.TalkToDevice(System.String,System.String)">
            <summary>
            Talk to specific address.
            </summary>
            <param name="dh"></param>
            <param name="dl"></param>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.BroadcasatToAllDevices">
            <summary>
            Talk to all devices.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.GetDestinationHigh">
            <summary>
            Return high address of destination in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.GetDestinationLow">
            <summary>
            Get low address of destinatin in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.GetSourceHigh">
            <summary>
            Get high address of source in string. 
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.GetSourceLow">
            <summary>
            get low address of source in string. 
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.GetPanID">
            <summary>
            Get Pan ID of in string.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.ISeries1.SetPanID(System.String)">
            <summary>
            Set pan ID.
            </summary>
            <returns><para>True for success</para></returns>
        </member>
        <member name="M:NCD.CSeries1.NCD#ISeries1#GetPanID">
            <summary>
            Get Pan id of in string
            </summary>
            <returns></returns>
        </member>
        <member name="M:NCD.CSeries1.NCD#ISeries1#SetPanID(System.String)">
            <summary>
            set pan id
            </summary>
            <returns></returns>
        </member>
        <member name="T:NCD.IASELPro">
            <summary>
            ASEL Pro Object Interface
            </summary>
        </member>
        <member name="M:NCD.IASELPro.SetInputToChannelA(System.Byte)">
            <summary>
            Connect an input to output channel A.
            </summary>
            <param name="input">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,1,Input(1-16)</description>
            <description>Set Output Channel A to Desired Input (ASELPro)</description>
            </item>
            <item>
            <description>254,1,Input(1-8)</description>
            <description>Set Output Channel A to Desired Input (8S2SPro)</description>
            </item>        
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.SetInputToChannelB(System.Byte)">
            <summary>
            Connect an input to output channel B.
            </summary>
            <param name="input">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,2,Input(1-16)</description>
            <description>Set Output Channel B to Desired Input (ASELPro)</description>
            </item>
            <item>
            <description>254,2,Input(1-8)</description>
            <description>Set Output Channel B to Desired Input (8S2SPro)</description>
            </item>        
            </list>
            </remarks>        
        </member>
        <member name="M:NCD.IASELPro.SetInputToChannelAB(System.Byte,System.Byte)">
            <summary>
            Connect two inputs to channel A and B respectively.
            </summary>
            <param name="inputA">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <param name="inputB">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,3,InputA(1-16), InputB(1-16)</description>
            <description>Set Output Channel A and B Simultaneously (Friendly)) for ASELPro</description>
            </item>
            <item>
            <description>254,3,InputA(1-8), InputB(1-8)</description>
            <description>Set Output Channel A and B Simultaneously (Friendly)) for 8S2SPro</description>
            </item>        
            </list>
            </remarks> 
        </member>
        <member name="M:NCD.IASELPro.SetInputToChannelAB_Fast(System.Byte,System.Byte)">
            <summary>
            Connect two inputs to channel A and B respectively FAST Mode.  
            </summary>
            <param name="inputA">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <param name="inputB">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,4,InputA(1-16), InputB(1-16)</description>
            <description>Set Output Channel A and B Simultaneously (Fast) for ASELPro</description>
            </item>
            <item>
            <description>254,4,InputA(1-8), InputB(1-8)</description>
            <description>Set Output Channel A and B Simultaneously (Fast) for 8S2SPro</description>
            </item>        
            </list>
            <para>This is fast way, supported by version 5.0 + firmware only.</para>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetE3CNumber">
            <summary>
            Report back the currently sotred E3C devcie number.
            </summary>
            <returns>E3C Device Number</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,10</description>
            <description>Get E3C Device Number</description>
            </item>
            </list>
            <para>Identical to E3C command 247.</para>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetCurrentInputToChannelA">
            <summary>
            Report the current input channel routed to channel A.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,11</description>
            <description>Report the Input Currently Routed to Output A</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetCurrentInputToChannelB">
            <summary>
            Report the current input channel routed to channel B.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,12</description>
            <description>Report the Input Currently Routed to Output B</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.StorePowerupDefault">
            <summary>
            Store the current input channel selection for output channels A and B in Non-Volatile Memory.
            </summary>
            <returns><para>True for success</para></returns>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,13</description>
            <description>Store Current Route Pattern as Powerup Default</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetPowerupDefaultToChannelA">
            <summary>
            Report default powerup input route for channel A.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,14</description>
            <description>Report Default Powerup Route Pattern for Channel A</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetPowerupDefaultToChannelB">
            <summary>
            Report default powerup input route for channel B.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,14</description>
            <description>Report Default Powerup Route Pattern for Channel B</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.SetMappingValue(System.Boolean)">
            <summary>
            Store a MAP Value used to swap the Upper and Lower Rows of Inputs on the ASELPRO.
            </summary>
            <param name="swap"><para>True or False.</para><para>'True' swaps lower and upper eight rows of inputs most commonly used with JALCO connectors.</para>
            <para>'False' sets the inputs to standard map.</para></param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,15,1</description>
            <description>Set Mapping Value (swaps lower and upper eight rows of inputs)</description>
            </item>
            <item>
            <description>254,15,0</description>
            <description>Set Mapping Value (sets the inputs to standard map)</description>
            </item>        
            </list>
            <para>It works with Version 4.0 firmware and later ONLY.</para>
            </remarks>
        </member>
        <member name="M:NCD.IASELPro.GetMappingValue">
            <summary>
            Read the current map setting.
            </summary>
            <returns><para>True or False</para>Ture for swap mode. False for standard mode</returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Command</term>
            <term>Function</term>
            </listheader>
            <item>
            <description>254,16</description>
            <description>Get Mapping Value</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#SetInputToChannelA(System.Byte)">
            <summary>
            Connects an input to output channel A.
            </summary>
            <param name="input">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#SetInputToChannelB(System.Byte)">
            <summary>
            Connects an input to output channel B.
            </summary>
            <param name="input">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#SetInputToChannelAB(System.Byte,System.Byte)">
            <summary>
            Connects two input to channel A and B respectively.
            </summary>
            <param name="inputA">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <param name="inputB">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#SetInputToChannelAB_Fast(System.Byte,System.Byte)">
            <summary>
            <para>Connects two input to channel A and B respectively. </para>
            This is fast way, supported by version 5.0 + firmware only.
            </summary>
            <param name="inputA">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <param name="inputB">1-16 for ASELPro<para>1-8 for 8S2SPro</para> </param>
            <returns><para>True for success</para></returns> 
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#GetE3CNumber">
            <summary>
            Reports back the currently sotred E3C devcie number.
            </summary>
            <returns>E3C number</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#GetCurrentInputToChannelA">
            <summary>
            Reports the current input channel routed to channel A.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NCD.ASELPro.NCD#IASELPro#GetCurrentInputToChannelB" -->
        <member name="M:NCD.ASELPro.NCD#IASELPro#StorePowerupDefault">
            <summary>
            Store the current input channel selection for output channels A and B in Non-Volatile Memory.
            </summary>
            <returns><para>True or False</para></returns>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#GetPowerupDefaultToChannelA">
            <summary>
            Reports default powerup input route for channel A.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#GetPowerupDefaultToChannelB">
            <summary>
            Reports default powerup input route for channel B.
            </summary>
            <returns>ID of Input Channel<para>1-16 for ASELPro</para><para>1-8 for 8S2SPRO</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#SetMappingValue(System.Boolean)">
            <summary>
            <para>Stores a MAP Value used to swap the Upper and Lower Rows of Inputs on the ASELPRO.</para>
            It works with Version 4.0 firmware and later ONLY.
            </summary>
            <param name="swap">True or False.<para>'True' swaps lower and upper eight rows of inputs most commonly used with JALCO connectors.</para>
            <para>'False' sets the inputs to standard map.</para></param>
            <returns><para>True for success</para></returns>
            <exception cref="T:System.ArgumentException">Wrong Arguement</exception>
        </member>
        <member name="M:NCD.ASELPro.NCD#IASELPro#GetMappingValue">
            <summary>
            Read the current map setting.
            </summary>
            <returns><para>True or False</para>Ture for swap mode. False for standard mode</returns>
            <exception cref="T:System.TimeoutException">Read Timeout</exception>
        </member>
    </members>
</doc>
